
Sensormodul.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000180  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800100  00800100  000001f4  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000a0  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000004a6  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000002d2  00000000  00000000  0000076a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000044f  00000000  00000000  00000a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000134  00000000  00000000  00000e8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000221  00000000  00000000  00000fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000014b  00000000  00000000  000011e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000070  00000000  00000000  0000132c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	78 c0       	rjmp	.+240    	; 0x126 <__vector_13>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	02 d0       	rcall	.+4      	; 0xae <main>
  aa:	68 c0       	rjmp	.+208    	; 0x17c <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <main>:
#include "ultraljud.h"


int main(void)
{
	setup_spi();
  ae:	1c d0       	rcall	.+56     	; 0xe8 <setup_spi>
	
	
	send_spi(ACTIVATE_ADC);
  b0:	84 e9       	ldi	r24, 0x94	; 148
  b2:	33 d0       	rcall	.+102    	; 0x11a <send_spi>
	send_spi(0xFF);
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	31 d0       	rcall	.+98     	; 0x11a <send_spi>
	send_spi(0xFF);
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	2f d0       	rcall	.+94     	; 0x11a <send_spi>
	send_spi(START_CONVERSION);
  bc:	84 e9       	ldi	r24, 0x94	; 148
  be:	2d d0       	rcall	.+90     	; 0x11a <send_spi>
	send_spi(0xFF);
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	2b d0       	rcall	.+86     	; 0x11a <send_spi>
	send_spi(0xFF);		
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	29 d0       	rcall	.+82     	; 0x11a <send_spi>
	send_spi(POLL);
  c8:	80 e8       	ldi	r24, 0x80	; 128
  ca:	27 d0       	rcall	.+78     	; 0x11a <send_spi>
	send_spi(0xFF);
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	25 d0       	rcall	.+74     	; 0x11a <send_spi>
	send_spi(0xFF);
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	23 d0       	rcall	.+70     	; 0x11a <send_spi>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	2f ef       	ldi	r18, 0xFF	; 255
  d6:	8f e7       	ldi	r24, 0x7F	; 127
  d8:	96 e1       	ldi	r25, 0x16	; 22
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	90 40       	sbci	r25, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x2c>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x36>
  e4:	00 00       	nop
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <main+0x38>

000000e8 <setup_spi>:
	DDRB |= (1 << SPI_SCLK); // output
}

void disable_spi()
{
	SPCR = 0x00;
  e8:	8c b5       	in	r24, 0x2c	; 44
  ea:	80 61       	ori	r24, 0x10	; 16
  ec:	8c bd       	out	0x2c, r24	; 44
  ee:	8c b5       	in	r24, 0x2c	; 44
  f0:	80 64       	ori	r24, 0x40	; 64
  f2:	8c bd       	out	0x2c, r24	; 44
  f4:	8c b5       	in	r24, 0x2c	; 44
  f6:	8c bd       	out	0x2c, r24	; 44
  f8:	8c b5       	in	r24, 0x2c	; 44
  fa:	88 60       	ori	r24, 0x08	; 8
  fc:	8c bd       	out	0x2c, r24	; 44
  fe:	8c b5       	in	r24, 0x2c	; 44
 100:	84 60       	ori	r24, 0x04	; 4
 102:	8c bd       	out	0x2c, r24	; 44
 104:	8c b5       	in	r24, 0x2c	; 44
 106:	81 60       	ori	r24, 0x01	; 1
 108:	8c bd       	out	0x2c, r24	; 44
 10a:	8c b5       	in	r24, 0x2c	; 44
 10c:	82 60       	ori	r24, 0x02	; 2
 10e:	8c bd       	out	0x2c, r24	; 44
 110:	25 9a       	sbi	0x04, 5	; 4
 112:	26 98       	cbi	0x04, 6	; 4
 114:	24 9a       	sbi	0x04, 4	; 4
 116:	27 9a       	sbi	0x04, 7	; 4
 118:	08 95       	ret

0000011a <send_spi>:
}

uint8_t send_spi(uint8_t out)
{
	SPDR = out;
 11a:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF))); //Loopar sålänge vi inte har skickat klart
 11c:	0d b4       	in	r0, 0x2d	; 45
 11e:	07 fe       	sbrs	r0, 7
 120:	fd cf       	rjmp	.-6      	; 0x11c <send_spi+0x2>
	return SPDR;
 122:	8e b5       	in	r24, 0x2e	; 46
	
}
 124:	08 95       	ret

00000126 <__vector_13>:
void timer_stop() {
	TCCR1B = 0;
}

#ifdef ENABLE_TIMER
ISR(TIMER1_COMPA_vect) {
 126:	1f 92       	push	r1
 128:	0f 92       	push	r0
 12a:	0f b6       	in	r0, 0x3f	; 63
 12c:	0f 92       	push	r0
 12e:	11 24       	eor	r1, r1
 130:	0b b6       	in	r0, 0x3b	; 59
 132:	0f 92       	push	r0
 134:	2f 93       	push	r18
 136:	3f 93       	push	r19
 138:	4f 93       	push	r20
 13a:	5f 93       	push	r21
 13c:	6f 93       	push	r22
 13e:	7f 93       	push	r23
 140:	8f 93       	push	r24
 142:	9f 93       	push	r25
 144:	af 93       	push	r26
 146:	bf 93       	push	r27
 148:	ef 93       	push	r30
 14a:	ff 93       	push	r31
	_t_func();
 14c:	e0 91 00 01 	lds	r30, 0x0100
 150:	f0 91 01 01 	lds	r31, 0x0101
 154:	09 95       	icall
}
 156:	ff 91       	pop	r31
 158:	ef 91       	pop	r30
 15a:	bf 91       	pop	r27
 15c:	af 91       	pop	r26
 15e:	9f 91       	pop	r25
 160:	8f 91       	pop	r24
 162:	7f 91       	pop	r23
 164:	6f 91       	pop	r22
 166:	5f 91       	pop	r21
 168:	4f 91       	pop	r20
 16a:	3f 91       	pop	r19
 16c:	2f 91       	pop	r18
 16e:	0f 90       	pop	r0
 170:	0b be       	out	0x3b, r0	; 59
 172:	0f 90       	pop	r0
 174:	0f be       	out	0x3f, r0	; 63
 176:	0f 90       	pop	r0
 178:	1f 90       	pop	r1
 17a:	18 95       	reti

0000017c <_exit>:
 17c:	f8 94       	cli

0000017e <__stop_program>:
 17e:	ff cf       	rjmp	.-2      	; 0x17e <__stop_program>
