
Sensormodul.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000002d4  00000368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000101  00800102  00800102  0000036a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000036a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  0000039a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006f0  00000000  00000000  00000452  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003dd  00000000  00000000  00000b42  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006a0  00000000  00000000  00000f1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000020c  00000000  00000000  000015c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002d7  00000000  00000000  000017cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000631  00000000  00000000  00001aa3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  000020d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	16 c1       	rjmp	.+556    	; 0x27e <__vector_20>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 ed       	ldi	r30, 0xD4	; 212
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	22 e0       	ldi	r18, 0x02	; 2
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 30       	cpi	r26, 0x03	; 3
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	83 d0       	rcall	.+262    	; 0x1ca <main>
  c4:	05 c1       	rjmp	.+522    	; 0x2d0 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <wait>:
#include <util/delay.h>

volatile int display_tester_loop=0;
int wait_time = 20;

void wait(int n){
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	00 d0       	rcall	.+0      	; 0xce <wait+0x6>
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
	
	volatile int a = 0;
  d2:	1a 82       	std	Y+2, r1	; 0x02
  d4:	19 82       	std	Y+1, r1	; 0x01
	while(a<n){a++;}
  d6:	29 81       	ldd	r18, Y+1	; 0x01
  d8:	3a 81       	ldd	r19, Y+2	; 0x02
  da:	28 17       	cp	r18, r24
  dc:	39 07       	cpc	r19, r25
  de:	5c f4       	brge	.+22     	; 0xf6 <wait+0x2e>
  e0:	29 81       	ldd	r18, Y+1	; 0x01
  e2:	3a 81       	ldd	r19, Y+2	; 0x02
  e4:	2f 5f       	subi	r18, 0xFF	; 255
  e6:	3f 4f       	sbci	r19, 0xFF	; 255
  e8:	3a 83       	std	Y+2, r19	; 0x02
  ea:	29 83       	std	Y+1, r18	; 0x01
  ec:	29 81       	ldd	r18, Y+1	; 0x01
  ee:	3a 81       	ldd	r19, Y+2	; 0x02
  f0:	28 17       	cp	r18, r24
  f2:	39 07       	cpc	r19, r25
  f4:	ac f3       	brlt	.-22     	; 0xe0 <wait+0x18>
}
  f6:	0f 90       	pop	r0
  f8:	0f 90       	pop	r0
  fa:	df 91       	pop	r29
  fc:	cf 91       	pop	r28
  fe:	08 95       	ret

00000100 <displayClear>:
		//PORTB &= ~(1 << DISP_E);
		wait(wait_time+1000);
}

void displayClear(){
		PORTB &= ~(1 << DISP_RS);	
 100:	28 98       	cbi	0x05, 0	; 5
		PORTB &= ~(1 << DISP_RW);	
 102:	29 98       	cbi	0x05, 1	; 5
		PORTC &= ~(1 << DISP_DB7);	
 104:	41 98       	cbi	0x08, 1	; 8
		PORTC &= ~(1 << DISP_DB6);	
 106:	40 98       	cbi	0x08, 0	; 8
		PORTD &= ~(1 << DISP_DB5);	
 108:	5f 98       	cbi	0x0b, 7	; 11
		PORTD &= ~(1 << DISP_DB4);	
 10a:	5e 98       	cbi	0x0b, 6	; 11
		PORTD &= ~(1 << DISP_DB3);	
 10c:	5d 98       	cbi	0x0b, 5	; 11
		PORTD &= ~(1 << DISP_DB2);	
 10e:	5c 98       	cbi	0x0b, 4	; 11
		PORTD &= ~(1 << DISP_DB1);	
 110:	5b 98       	cbi	0x0b, 3	; 11
		PORTD |= (1 << DISP_DB1);	
 112:	5b 9a       	sbi	0x0b, 3	; 11
		
		//PORTB |= (1 << DISP_E);
		wait(wait_time);
 114:	80 91 00 01 	lds	r24, 0x0100
 118:	90 91 01 01 	lds	r25, 0x0101
 11c:	d5 df       	rcall	.-86     	; 0xc8 <wait>
		//PORTB &= ~(1 << DISP_E);
		wait(wait_time);
 11e:	80 91 00 01 	lds	r24, 0x0100
 122:	90 91 01 01 	lds	r25, 0x0101
 126:	d0 cf       	rjmp	.-96     	; 0xc8 <wait>
 128:	08 95       	ret

0000012a <init_display>:
	volatile int a = 0;
	while(a<n){a++;}
}

void init_display(){
		DDRB |= (1 << DISP_RS);
 12a:	20 9a       	sbi	0x04, 0	; 4
		DDRB |= (1 << DISP_RW);
 12c:	21 9a       	sbi	0x04, 1	; 4
		DDRB |= (1 << DISP_E);
 12e:	22 9a       	sbi	0x04, 2	; 4
		DDRC |= (1 << DISP_DB7);
 130:	39 9a       	sbi	0x07, 1	; 7
		DDRC |= (1 << DISP_DB6);
 132:	38 9a       	sbi	0x07, 0	; 7
		DDRD |= (1 << DISP_DB5);
 134:	57 9a       	sbi	0x0a, 7	; 10
		DDRD |= (1 << DISP_DB4);
 136:	56 9a       	sbi	0x0a, 6	; 10
		DDRD |= (1 << DISP_DB3);
 138:	55 9a       	sbi	0x0a, 5	; 10
		DDRD |= (1 << DISP_DB2);
 13a:	54 9a       	sbi	0x0a, 4	; 10
		DDRD |= (1 << DISP_DB1);
 13c:	53 9a       	sbi	0x0a, 3	; 10
		DDRD |= (1 << DISP_DB0);
 13e:	52 9a       	sbi	0x0a, 2	; 10
		
		//PORTB &= ~(1 << DISP_E);
		wait(wait_time);
 140:	80 91 00 01 	lds	r24, 0x0100
 144:	90 91 01 01 	lds	r25, 0x0101
 148:	bf df       	rcall	.-130    	; 0xc8 <wait>
		//function set
		PORTB &= ~(1 << DISP_RS);	
 14a:	28 98       	cbi	0x05, 0	; 5
		PORTB &= ~(1 << DISP_RW);	
 14c:	29 98       	cbi	0x05, 1	; 5
		PORTC &= ~(1 << DISP_DB7);	
 14e:	41 98       	cbi	0x08, 1	; 8
		PORTC &= ~(1 << DISP_DB6);	
 150:	40 98       	cbi	0x08, 0	; 8
		PORTD |= (1 << DISP_DB5);		
 152:	5f 9a       	sbi	0x0b, 7	; 11
		PORTD |= (1 << DISP_DB4);		
 154:	5e 9a       	sbi	0x0b, 6	; 11
		PORTD |= (1 << DISP_DB3);		
 156:	5d 9a       	sbi	0x0b, 5	; 11
		PORTD &= ~(1 << DISP_DB2);	
 158:	5c 98       	cbi	0x0b, 4	; 11
		PORTD &= ~(1 << DISP_DB1);	
 15a:	5b 98       	cbi	0x0b, 3	; 11
		PORTD &= ~(1 << DISP_DB0);	
 15c:	5a 98       	cbi	0x0b, 2	; 11
		
		//PORTB |= (1 << DISP_E);
		wait(wait_time);
 15e:	80 91 00 01 	lds	r24, 0x0100
 162:	90 91 01 01 	lds	r25, 0x0101
 166:	b0 df       	rcall	.-160    	; 0xc8 <wait>
		//PORTB &= ~(1 << DISP_E);
		wait(wait_time);
 168:	80 91 00 01 	lds	r24, 0x0100
 16c:	90 91 01 01 	lds	r25, 0x0101
 170:	ab df       	rcall	.-170    	; 0xc8 <wait>
	
		//display on
		PORTB &= ~(1 << DISP_RS);	
 172:	28 98       	cbi	0x05, 0	; 5
		PORTB &= ~(1 << DISP_RW);
 174:	29 98       	cbi	0x05, 1	; 5
		PORTC &= ~(1 << DISP_DB7);	
 176:	41 98       	cbi	0x08, 1	; 8
		PORTC &= ~(1 << DISP_DB6);	
 178:	40 98       	cbi	0x08, 0	; 8
		PORTD &= ~(1 << DISP_DB5);
 17a:	5f 98       	cbi	0x0b, 7	; 11
		PORTD &= ~(1 << DISP_DB4);	
 17c:	5e 98       	cbi	0x0b, 6	; 11
		PORTD |= (1 << DISP_DB3);	
 17e:	5d 9a       	sbi	0x0b, 5	; 11
		PORTD |= (1 << DISP_DB2);		
 180:	5c 9a       	sbi	0x0b, 4	; 11
		PORTD |= (1 << DISP_DB1);		
 182:	5b 9a       	sbi	0x0b, 3	; 11
		PORTD |= (1 << DISP_DB0);	
 184:	5a 9a       	sbi	0x0b, 2	; 11
		
		//PORTB |= (1 << DISP_E);
		wait(wait_time);
 186:	80 91 00 01 	lds	r24, 0x0100
 18a:	90 91 01 01 	lds	r25, 0x0101
 18e:	9c df       	rcall	.-200    	; 0xc8 <wait>
		//PORTB &= ~(1 << DISP_E);
		wait(wait_time);
 190:	80 91 00 01 	lds	r24, 0x0100
 194:	90 91 01 01 	lds	r25, 0x0101
 198:	97 df       	rcall	.-210    	; 0xc8 <wait>
		
		displayClear();
 19a:	b2 df       	rcall	.-156    	; 0x100 <displayClear>
		
		//entry mode set
		PORTB &= ~(1 << DISP_RS);	
 19c:	28 98       	cbi	0x05, 0	; 5
		PORTB &= ~(1 << DISP_RW);
 19e:	29 98       	cbi	0x05, 1	; 5
		PORTC &= ~(1 << DISP_DB7);
 1a0:	41 98       	cbi	0x08, 1	; 8
		PORTC &= ~(1 << DISP_DB6);
 1a2:	40 98       	cbi	0x08, 0	; 8
		PORTD &= ~(1 << DISP_DB5);	
 1a4:	5f 98       	cbi	0x0b, 7	; 11
		PORTD &= ~(1 << DISP_DB4);	
 1a6:	5e 98       	cbi	0x0b, 6	; 11
		PORTD &= ~(1 << DISP_DB3);	
 1a8:	5d 98       	cbi	0x0b, 5	; 11
		PORTD |= (1 << DISP_DB2);		
 1aa:	5c 9a       	sbi	0x0b, 4	; 11
		PORTD |= (1 << DISP_DB1);		
 1ac:	5b 9a       	sbi	0x0b, 3	; 11
		PORTD |= (1 << DISP_DB0);		
 1ae:	5a 9a       	sbi	0x0b, 2	; 11
		
		//PORTB |= (1 << DISP_E);
		wait(wait_time);
 1b0:	80 91 00 01 	lds	r24, 0x0100
 1b4:	90 91 01 01 	lds	r25, 0x0101
 1b8:	87 df       	rcall	.-242    	; 0xc8 <wait>
		//PORTB &= ~(1 << DISP_E);
		wait(wait_time+1000);
 1ba:	80 91 00 01 	lds	r24, 0x0100
 1be:	90 91 01 01 	lds	r25, 0x0101
 1c2:	88 51       	subi	r24, 0x18	; 24
 1c4:	9c 4f       	sbci	r25, 0xFC	; 252
 1c6:	80 cf       	rjmp	.-256    	; 0xc8 <wait>
 1c8:	08 95       	ret

000001ca <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ca:	2f e7       	ldi	r18, 0x7F	; 127
 1cc:	88 e3       	ldi	r24, 0x38	; 56
 1ce:	91 e0       	ldi	r25, 0x01	; 1
 1d0:	21 50       	subi	r18, 0x01	; 1
 1d2:	80 40       	sbci	r24, 0x00	; 0
 1d4:	90 40       	sbci	r25, 0x00	; 0
 1d6:	e1 f7       	brne	.-8      	; 0x1d0 <main+0x6>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <main+0x10>
 1da:	00 00       	nop
	//init_sensors();
	//setup_spi();
	//activateADC();
	
	_delay_ms(50);
	init_display();
 1dc:	a6 df       	rcall	.-180    	; 0x12a <init_display>
 1de:	ff cf       	rjmp	.-2      	; 0x1de <main+0x14>

000001e0 <uart_read_char>:
}

void uart_send_char(uint8_t data)
{
	while(!bit_is_set(UCSR0A, UDRE0));
	UDR0 = data;
 1e0:	e0 ec       	ldi	r30, 0xC0	; 192
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	80 81       	ld	r24, Z
 1e6:	88 23       	and	r24, r24
 1e8:	ec f7       	brge	.-6      	; 0x1e4 <uart_read_char+0x4>
 1ea:	80 91 c6 00 	lds	r24, 0x00C6
 1ee:	08 95       	ret

000001f0 <uart_read_string>:
}

int uart_read_string(char *s, int size)
{
 1f0:	cf 92       	push	r12
 1f2:	df 92       	push	r13
 1f4:	ef 92       	push	r14
 1f6:	ff 92       	push	r15
 1f8:	0f 93       	push	r16
 1fa:	1f 93       	push	r17
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	8c 01       	movw	r16, r24
	uint8_t i = 0;
	char c;
	
	while(i < size - 1){
 202:	7b 01       	movw	r14, r22
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	e8 1a       	sub	r14, r24
 208:	f1 08       	sbc	r15, r1
 20a:	1e 14       	cp	r1, r14
 20c:	1f 04       	cpc	r1, r15
 20e:	cc f4       	brge	.+50     	; 0x242 <uart_read_string+0x52>
 210:	c0 e0       	ldi	r28, 0x00	; 0
 212:	d0 e0       	ldi	r29, 0x00	; 0
	UDR0 = data;
}

int uart_read_string(char *s, int size)
{
	uint8_t i = 0;
 214:	d1 2c       	mov	r13, r1
	while(i < size - 1){
		c = uart_read_char();
		if(c == '\0')
			break;
		else if(c == '#'){
			i = 0;
 216:	c1 2c       	mov	r12, r1
{
	uint8_t i = 0;
	char c;
	
	while(i < size - 1){
		c = uart_read_char();
 218:	e3 df       	rcall	.-58     	; 0x1e0 <uart_read_char>
		if(c == '\0')
 21a:	88 23       	and	r24, r24
 21c:	a9 f0       	breq	.+42     	; 0x248 <uart_read_string+0x58>
			break;
		else if(c == '#'){
 21e:	83 32       	cpi	r24, 0x23	; 35
 220:	11 f0       	breq	.+4      	; 0x226 <uart_read_string+0x36>
 222:	9d 2d       	mov	r25, r13
 224:	01 c0       	rjmp	.+2      	; 0x228 <uart_read_string+0x38>
			i = 0;
 226:	9c 2d       	mov	r25, r12
		}
		s[i++] = c;
 228:	dd 24       	eor	r13, r13
 22a:	d3 94       	inc	r13
 22c:	d9 0e       	add	r13, r25
 22e:	f8 01       	movw	r30, r16
 230:	e9 0f       	add	r30, r25
 232:	f1 1d       	adc	r31, r1
 234:	80 83       	st	Z, r24
int uart_read_string(char *s, int size)
{
	uint8_t i = 0;
	char c;
	
	while(i < size - 1){
 236:	cd 2d       	mov	r28, r13
 238:	d0 e0       	ldi	r29, 0x00	; 0
 23a:	ce 15       	cp	r28, r14
 23c:	df 05       	cpc	r29, r15
 23e:	64 f3       	brlt	.-40     	; 0x218 <uart_read_string+0x28>
 240:	03 c0       	rjmp	.+6      	; 0x248 <uart_read_string+0x58>
 242:	c0 e0       	ldi	r28, 0x00	; 0
 244:	d0 e0       	ldi	r29, 0x00	; 0
	UDR0 = data;
}

int uart_read_string(char *s, int size)
{
	uint8_t i = 0;
 246:	d1 2c       	mov	r13, r1
			i = 0;
		}
		s[i++] = c;
	}
	
	s[i] = 0;
 248:	f8 01       	movw	r30, r16
 24a:	ed 0d       	add	r30, r13
 24c:	f1 1d       	adc	r31, r1
 24e:	10 82       	st	Z, r1
	
	return i + 1;
}
 250:	ce 01       	movw	r24, r28
 252:	01 96       	adiw	r24, 0x01	; 1
 254:	df 91       	pop	r29
 256:	cf 91       	pop	r28
 258:	1f 91       	pop	r17
 25a:	0f 91       	pop	r16
 25c:	ff 90       	pop	r15
 25e:	ef 90       	pop	r14
 260:	df 90       	pop	r13
 262:	cf 90       	pop	r12
 264:	08 95       	ret

00000266 <check_rx>:
	set_bit(UCSR0B, RXCIE0);
	UCSR0C = (3 << UCSZ00);
}

void check_rx() {
	if (bit_is_set(UCSR0A, RXC0)){
 266:	80 91 c0 00 	lds	r24, 0x00C0
 26a:	88 23       	and	r24, r24
 26c:	3c f4       	brge	.+14     	; 0x27c <check_rx+0x16>
		buffer_size = uart_read_string(buffer, 255);
 26e:	6f ef       	ldi	r22, 0xFF	; 255
 270:	70 e0       	ldi	r23, 0x00	; 0
 272:	83 e0       	ldi	r24, 0x03	; 3
 274:	91 e0       	ldi	r25, 0x01	; 1
 276:	bc df       	rcall	.-136    	; 0x1f0 <uart_read_string>
 278:	80 93 02 01 	sts	0x0102, r24
 27c:	08 95       	ret

0000027e <__vector_20>:
	}
}

ISR(USART0_RX_vect){
 27e:	1f 92       	push	r1
 280:	0f 92       	push	r0
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	0f 92       	push	r0
 286:	11 24       	eor	r1, r1
 288:	0b b6       	in	r0, 0x3b	; 59
 28a:	0f 92       	push	r0
 28c:	2f 93       	push	r18
 28e:	3f 93       	push	r19
 290:	4f 93       	push	r20
 292:	5f 93       	push	r21
 294:	6f 93       	push	r22
 296:	7f 93       	push	r23
 298:	8f 93       	push	r24
 29a:	9f 93       	push	r25
 29c:	af 93       	push	r26
 29e:	bf 93       	push	r27
 2a0:	ef 93       	push	r30
 2a2:	ff 93       	push	r31
	cli();
 2a4:	f8 94       	cli
	check_rx();
 2a6:	df df       	rcall	.-66     	; 0x266 <check_rx>
	sei();
 2a8:	78 94       	sei
}
 2aa:	ff 91       	pop	r31
 2ac:	ef 91       	pop	r30
 2ae:	bf 91       	pop	r27
 2b0:	af 91       	pop	r26
 2b2:	9f 91       	pop	r25
 2b4:	8f 91       	pop	r24
 2b6:	7f 91       	pop	r23
 2b8:	6f 91       	pop	r22
 2ba:	5f 91       	pop	r21
 2bc:	4f 91       	pop	r20
 2be:	3f 91       	pop	r19
 2c0:	2f 91       	pop	r18
 2c2:	0f 90       	pop	r0
 2c4:	0b be       	out	0x3b, r0	; 59
 2c6:	0f 90       	pop	r0
 2c8:	0f be       	out	0x3f, r0	; 63
 2ca:	0f 90       	pop	r0
 2cc:	1f 90       	pop	r1
 2ce:	18 95       	reti

000002d0 <_exit>:
 2d0:	f8 94       	cli

000002d2 <__stop_program>:
 2d2:	ff cf       	rjmp	.-2      	; 0x2d2 <__stop_program>
