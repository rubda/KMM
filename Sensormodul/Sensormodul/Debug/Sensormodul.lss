
Sensormodul.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800100  00800100  00000272  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000272  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000e0  00000000  00000000  000002a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000817  00000000  00000000  00000382  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000004d0  00000000  00000000  00000b99  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000665  00000000  00000000  00001069  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001c8  00000000  00000000  000016d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002e8  00000000  00000000  00001898  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000492  00000000  00000000  00001b80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000a0  00000000  00000000  00002012  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	b7 c0       	rjmp	.+366    	; 0x1a4 <__vector_13>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	2d d0       	rcall	.+90     	; 0x104 <main>
  aa:	a7 c0       	rjmp	.+334    	; 0x1fa <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <activateADC>:
void activateADC()
{
	uint16_t REG = 0;
	
	//Steg 1 sätt ADC till aktiv mode
	ss_low();
  ae:	76 d0       	rcall	.+236    	; 0x19c <ss_low>
	send_spi(ACTIVATE_ADC);
  b0:	84 e9       	ldi	r24, 0x94	; 148
  b2:	5c d0       	rcall	.+184    	; 0x16c <send_spi>
	REG = get_spi(0xFF);
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	60 d0       	rcall	.+192    	; 0x178 <get_spi>
	ss_high();
  b8:	73 d0       	rcall	.+230    	; 0x1a0 <ss_high>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	8b e2       	ldi	r24, 0x2B	; 43
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <activateADC+0x10>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <activateADC+0x16>
  c4:	00 00       	nop
  c6:	08 95       	ret

000000c8 <startConversion>:

void startConversion(){
	uint16_t REG = 0;
	
	//Steg 2 conversion
	ss_low();
  c8:	69 d0       	rcall	.+210    	; 0x19c <ss_low>
	send_spi(START_CONVERSION);
  ca:	84 e9       	ldi	r24, 0x94	; 148
  cc:	4f d0       	rcall	.+158    	; 0x16c <send_spi>
	REG = get_spi(0xFF);
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	53 d0       	rcall	.+166    	; 0x178 <get_spi>
	ss_high();
  d2:	66 c0       	rjmp	.+204    	; 0x1a0 <ss_high>
  d4:	08 95       	ret

000000d6 <getAngularRate>:
	REG = 0;
}


uint16_t getAngularRate()
{
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
	uint16_t REG = 0;
	uint16_t DATA = 0;
	
	startConversion();
  da:	f6 df       	rcall	.-20     	; 0xc8 <startConversion>
	
	//Steg 3 poll
	ss_low();
  dc:	5f d0       	rcall	.+190    	; 0x19c <ss_low>
	send_spi(POLL);
  de:	80 e8       	ldi	r24, 0x80	; 128
  e0:	45 d0       	rcall	.+138    	; 0x16c <send_spi>
  e2:	8b e2       	ldi	r24, 0x2B	; 43
  e4:	91 e0       	ldi	r25, 0x01	; 1
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <getAngularRate+0x10>
  ea:	00 c0       	rjmp	.+0      	; 0xec <getAngularRate+0x16>
  ec:	00 00       	nop
	_delay_us(150);
	
	if (REG & (1 << 16)) getAngularRate();
	REG = get_spi(0xFF);
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	43 d0       	rcall	.+134    	; 0x178 <get_spi>
  f2:	ec 01       	movw	r28, r24
	ss_high();
  f4:	55 d0       	rcall	.+170    	; 0x1a0 <ss_high>
	
	REG = REG >> 1;
  f6:	ce 01       	movw	r24, r28
  f8:	96 95       	lsr	r25
  fa:	87 95       	ror	r24
	DATA = REG & 0x07FF; 
	
	return DATA;		
}	
  fc:	97 70       	andi	r25, 0x07	; 7
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <main>:
#include "ultraljud.h"


int main(void)
{
	setup_spi();
 104:	1a d0       	rcall	.+52     	; 0x13a <setup_spi>
	activateADC();
 106:	d3 df       	rcall	.-90     	; 0xae <activateADC>
	
	DDRA |= (1 << PORTA5);
 108:	0d 9a       	sbi	0x01, 5	; 1


	
	while(1)
    {
		test = getAngularRate();
 10a:	d0 e1       	ldi	r29, 0x10	; 16
 10c:	c0 e0       	ldi	r28, 0x00	; 0
 10e:	e3 df       	rcall	.-58     	; 0xd6 <getAngularRate>
 110:	2d 2f       	mov	r18, r29
 112:	3c 2f       	mov	r19, r28
		for(int i=16; i>0; i--){
			one = (test & 0x8000) >> 15;
			
			if (one == 1) {
 114:	99 23       	and	r25, r25
 116:	14 f4       	brge	.+4      	; 0x11c <main+0x18>
				PORTA |= (1 <<PORTA5);
 118:	15 9a       	sbi	0x02, 5	; 2
 11a:	01 c0       	rjmp	.+2      	; 0x11e <main+0x1a>
			}else{
				PORTA &= ~(1 <<PORTA5);
 11c:	15 98       	cbi	0x02, 5	; 2
			}
			test <<= 1;
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 122:	ef e1       	ldi	r30, 0x1F	; 31
 124:	fe e4       	ldi	r31, 0x4E	; 78
 126:	31 97       	sbiw	r30, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <main+0x22>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <main+0x28>
 12c:	00 00       	nop
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	31 09       	sbc	r19, r1

	
	while(1)
    {
		test = getAngularRate();
		for(int i=16; i>0; i--){
 132:	21 15       	cp	r18, r1
 134:	31 05       	cpc	r19, r1
 136:	71 f7       	brne	.-36     	; 0x114 <main+0x10>
 138:	ea cf       	rjmp	.-44     	; 0x10e <main+0xa>

0000013a <setup_spi>:
	DDRB |= (1 << SPI_SCLK); // output
}

void disable_spi()
{
	SPCR = 0x00;
 13a:	8c b5       	in	r24, 0x2c	; 44
 13c:	80 61       	ori	r24, 0x10	; 16
 13e:	8c bd       	out	0x2c, r24	; 44
 140:	8c b5       	in	r24, 0x2c	; 44
 142:	80 64       	ori	r24, 0x40	; 64
 144:	8c bd       	out	0x2c, r24	; 44
 146:	8c b5       	in	r24, 0x2c	; 44
 148:	8c bd       	out	0x2c, r24	; 44
 14a:	8c b5       	in	r24, 0x2c	; 44
 14c:	88 60       	ori	r24, 0x08	; 8
 14e:	8c bd       	out	0x2c, r24	; 44
 150:	8c b5       	in	r24, 0x2c	; 44
 152:	84 60       	ori	r24, 0x04	; 4
 154:	8c bd       	out	0x2c, r24	; 44
 156:	8c b5       	in	r24, 0x2c	; 44
 158:	81 60       	ori	r24, 0x01	; 1
 15a:	8c bd       	out	0x2c, r24	; 44
 15c:	8c b5       	in	r24, 0x2c	; 44
 15e:	82 60       	ori	r24, 0x02	; 2
 160:	8c bd       	out	0x2c, r24	; 44
 162:	25 9a       	sbi	0x04, 5	; 4
 164:	26 98       	cbi	0x04, 6	; 4
 166:	24 9a       	sbi	0x04, 4	; 4
 168:	27 9a       	sbi	0x04, 7	; 4
 16a:	08 95       	ret

0000016c <send_spi>:
}

uint8_t send_spi(uint8_t out)
{
	SPDR = out;
 16c:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF))); //Loopar sålänge vi inte har skickat klart
 16e:	0d b4       	in	r0, 0x2d	; 45
 170:	07 fe       	sbrs	r0, 7
 172:	fd cf       	rjmp	.-6      	; 0x16e <send_spi+0x2>
	return SPDR;
 174:	8e b5       	in	r24, 0x2e	; 46
}
 176:	08 95       	ret

00000178 <get_spi>:


uint16_t get_spi(uint8_t data)
{
 178:	1f 93       	push	r17
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	18 2f       	mov	r17, r24
	uint16_t REG = 0;
	uint16_t REG1 = 0;
	uint16_t REG2 = 0;
	
	REG1 = send_spi(data);
 180:	f5 df       	rcall	.-22     	; 0x16c <send_spi>
 182:	c8 2f       	mov	r28, r24
 184:	d0 e0       	ldi	r29, 0x00	; 0
	REG1 = REG1 << 8;
	REG2 = send_spi(data);
 186:	81 2f       	mov	r24, r17
 188:	f1 df       	rcall	.-30     	; 0x16c <send_spi>
	uint16_t REG = 0;
	uint16_t REG1 = 0;
	uint16_t REG2 = 0;
	
	REG1 = send_spi(data);
	REG1 = REG1 << 8;
 18a:	dc 2f       	mov	r29, r28
 18c:	cc 27       	eor	r28, r28
	REG2 = send_spi(data);
	REG = REG1 | REG2;
	
	return REG;
}
 18e:	9e 01       	movw	r18, r28
 190:	28 2b       	or	r18, r24
 192:	c9 01       	movw	r24, r18
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	1f 91       	pop	r17
 19a:	08 95       	ret

0000019c <ss_low>:

void ss_low()
{
	PORTB &= ~(1 << SPI_SS);
 19c:	2c 98       	cbi	0x05, 4	; 5
 19e:	08 95       	ret

000001a0 <ss_high>:
}	

void ss_high()
{
	PORTB |= (1 << SPI_SS);
 1a0:	2c 9a       	sbi	0x05, 4	; 5
 1a2:	08 95       	ret

000001a4 <__vector_13>:
void timer_stop() {
	TCCR1B = 0;
}

#ifdef ENABLE_TIMER
ISR(TIMER1_COMPA_vect) {
 1a4:	1f 92       	push	r1
 1a6:	0f 92       	push	r0
 1a8:	0f b6       	in	r0, 0x3f	; 63
 1aa:	0f 92       	push	r0
 1ac:	11 24       	eor	r1, r1
 1ae:	0b b6       	in	r0, 0x3b	; 59
 1b0:	0f 92       	push	r0
 1b2:	2f 93       	push	r18
 1b4:	3f 93       	push	r19
 1b6:	4f 93       	push	r20
 1b8:	5f 93       	push	r21
 1ba:	6f 93       	push	r22
 1bc:	7f 93       	push	r23
 1be:	8f 93       	push	r24
 1c0:	9f 93       	push	r25
 1c2:	af 93       	push	r26
 1c4:	bf 93       	push	r27
 1c6:	ef 93       	push	r30
 1c8:	ff 93       	push	r31
	_t_func();
 1ca:	e0 91 00 01 	lds	r30, 0x0100
 1ce:	f0 91 01 01 	lds	r31, 0x0101
 1d2:	09 95       	icall
}
 1d4:	ff 91       	pop	r31
 1d6:	ef 91       	pop	r30
 1d8:	bf 91       	pop	r27
 1da:	af 91       	pop	r26
 1dc:	9f 91       	pop	r25
 1de:	8f 91       	pop	r24
 1e0:	7f 91       	pop	r23
 1e2:	6f 91       	pop	r22
 1e4:	5f 91       	pop	r21
 1e6:	4f 91       	pop	r20
 1e8:	3f 91       	pop	r19
 1ea:	2f 91       	pop	r18
 1ec:	0f 90       	pop	r0
 1ee:	0b be       	out	0x3b, r0	; 59
 1f0:	0f 90       	pop	r0
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	0f 90       	pop	r0
 1f6:	1f 90       	pop	r1
 1f8:	18 95       	reti

000001fa <_exit>:
 1fa:	f8 94       	cli

000001fc <__stop_program>:
 1fc:	ff cf       	rjmp	.-2      	; 0x1fc <__stop_program>
