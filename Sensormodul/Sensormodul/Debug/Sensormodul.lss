
Sensormodul.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800100  00800100  00000240  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000d8  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000727  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000438  00000000  00000000  00000a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000597  00000000  00000000  00000ea7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001b0  00000000  00000000  00001440  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002bf  00000000  00000000  000015f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000040c  00000000  00000000  000018af  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000098  00000000  00000000  00001cbb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	9e c0       	rjmp	.+316    	; 0x172 <__vector_13>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	2b d0       	rcall	.+86     	; 0x100 <main>
  aa:	8e c0       	rjmp	.+284    	; 0x1c8 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <activateADC>:
void activateADC()
{
	uint16_t REG = 0;
	
	//Steg 1 sätt ADC till aktiv mode
	ss_low();
  ae:	5d d0       	rcall	.+186    	; 0x16a <ss_low>
	send_spi(ACTIVATE_ADC);
  b0:	84 e9       	ldi	r24, 0x94	; 148
  b2:	43 d0       	rcall	.+134    	; 0x13a <send_spi>
	REG = get_spi(0xFF);
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	47 d0       	rcall	.+142    	; 0x146 <get_spi>
	ss_high();
  b8:	5a d0       	rcall	.+180    	; 0x16e <ss_high>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	8b e2       	ldi	r24, 0x2B	; 43
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <activateADC+0x10>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <activateADC+0x16>
  c4:	00 00       	nop
  c6:	08 95       	ret

000000c8 <getAngularRate>:
	_delay_us(150);
}


uint16_t getAngularRate()
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
	uint16_t REG = 0;
	uint16_t DATA = 0;
	
	//Steg 2 conversion
	ss_low();
  cc:	4e d0       	rcall	.+156    	; 0x16a <ss_low>
	send_spi(START_CONVERSION);
  ce:	84 e9       	ldi	r24, 0x94	; 148
  d0:	34 d0       	rcall	.+104    	; 0x13a <send_spi>
	REG = get_spi(0xFF);
  d2:	8f ef       	ldi	r24, 0xFF	; 255
  d4:	38 d0       	rcall	.+112    	; 0x146 <get_spi>
	ss_high();
  d6:	4b d0       	rcall	.+150    	; 0x16e <ss_high>
	
	//if (REG & (1 << 16)) NULL; //BAJS;
	REG = 0;
	
	//Steg 3 poll
	ss_low();
  d8:	48 d0       	rcall	.+144    	; 0x16a <ss_low>
	send_spi(POLL);
  da:	80 e8       	ldi	r24, 0x80	; 128
  dc:	2e d0       	rcall	.+92     	; 0x13a <send_spi>
  de:	8b e2       	ldi	r24, 0x2B	; 43
  e0:	91 e0       	ldi	r25, 0x01	; 1
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <getAngularRate+0x1a>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <getAngularRate+0x20>
  e8:	00 00       	nop
	_delay_us(150);
	
	//if (REG & (1 << 16)) NULL; //BAJS;
	REG = get_spi(0xFF);
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	2c d0       	rcall	.+88     	; 0x146 <get_spi>
  ee:	ec 01       	movw	r28, r24
	ss_high();
  f0:	3e d0       	rcall	.+124    	; 0x16e <ss_high>
	
	REG = REG >> 1;
  f2:	ce 01       	movw	r24, r28
  f4:	96 95       	lsr	r25
  f6:	87 95       	ror	r24
	DATA = REG & 0x07FF; 
	
	return DATA;		
}	
  f8:	97 70       	andi	r25, 0x07	; 7
  fa:	df 91       	pop	r29
  fc:	cf 91       	pop	r28
  fe:	08 95       	ret

00000100 <main>:
#include "ultraljud.h"


int main(void)
{
	setup_spi();
 100:	03 d0       	rcall	.+6      	; 0x108 <setup_spi>
	activateADC();
 102:	d5 df       	rcall	.-86     	; 0xae <activateADC>
	getAngularRate();
 104:	e1 df       	rcall	.-62     	; 0xc8 <getAngularRate>
 106:	ff cf       	rjmp	.-2      	; 0x106 <main+0x6>

00000108 <setup_spi>:
	DDRB |= (1 << SPI_SCLK); // output
}

void disable_spi()
{
	SPCR = 0x00;
 108:	8c b5       	in	r24, 0x2c	; 44
 10a:	80 61       	ori	r24, 0x10	; 16
 10c:	8c bd       	out	0x2c, r24	; 44
 10e:	8c b5       	in	r24, 0x2c	; 44
 110:	80 64       	ori	r24, 0x40	; 64
 112:	8c bd       	out	0x2c, r24	; 44
 114:	8c b5       	in	r24, 0x2c	; 44
 116:	8c bd       	out	0x2c, r24	; 44
 118:	8c b5       	in	r24, 0x2c	; 44
 11a:	88 60       	ori	r24, 0x08	; 8
 11c:	8c bd       	out	0x2c, r24	; 44
 11e:	8c b5       	in	r24, 0x2c	; 44
 120:	84 60       	ori	r24, 0x04	; 4
 122:	8c bd       	out	0x2c, r24	; 44
 124:	8c b5       	in	r24, 0x2c	; 44
 126:	81 60       	ori	r24, 0x01	; 1
 128:	8c bd       	out	0x2c, r24	; 44
 12a:	8c b5       	in	r24, 0x2c	; 44
 12c:	82 60       	ori	r24, 0x02	; 2
 12e:	8c bd       	out	0x2c, r24	; 44
 130:	25 9a       	sbi	0x04, 5	; 4
 132:	26 98       	cbi	0x04, 6	; 4
 134:	24 9a       	sbi	0x04, 4	; 4
 136:	27 9a       	sbi	0x04, 7	; 4
 138:	08 95       	ret

0000013a <send_spi>:
}

uint8_t send_spi(uint8_t out)
{
	SPDR = out;
 13a:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF))); //Loopar sålänge vi inte har skickat klart
 13c:	0d b4       	in	r0, 0x2d	; 45
 13e:	07 fe       	sbrs	r0, 7
 140:	fd cf       	rjmp	.-6      	; 0x13c <send_spi+0x2>
	return SPDR;
 142:	8e b5       	in	r24, 0x2e	; 46
}
 144:	08 95       	ret

00000146 <get_spi>:


uint16_t get_spi(uint8_t data)
{
 146:	1f 93       	push	r17
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	18 2f       	mov	r17, r24
	uint16_t REG = 0;
	uint16_t REG1 = 0;
	uint16_t REG2 = 0;
	
	REG1 = send_spi(data);
 14e:	f5 df       	rcall	.-22     	; 0x13a <send_spi>
 150:	c8 2f       	mov	r28, r24
 152:	d0 e0       	ldi	r29, 0x00	; 0
	REG1 = REG1 << 8;
	REG2 = send_spi(data);
 154:	81 2f       	mov	r24, r17
 156:	f1 df       	rcall	.-30     	; 0x13a <send_spi>
	uint16_t REG = 0;
	uint16_t REG1 = 0;
	uint16_t REG2 = 0;
	
	REG1 = send_spi(data);
	REG1 = REG1 << 8;
 158:	dc 2f       	mov	r29, r28
 15a:	cc 27       	eor	r28, r28
	REG2 = send_spi(data);
	REG = REG1 | REG2;
	
	return REG;
}
 15c:	9e 01       	movw	r18, r28
 15e:	28 2b       	or	r18, r24
 160:	c9 01       	movw	r24, r18
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	1f 91       	pop	r17
 168:	08 95       	ret

0000016a <ss_low>:

void ss_low()
{
	PORTB &= ~(1 << SPI_SS);
 16a:	2c 98       	cbi	0x05, 4	; 5
 16c:	08 95       	ret

0000016e <ss_high>:
}	

void ss_high()
{
	PORTB |= (1 << SPI_SS);
 16e:	2c 9a       	sbi	0x05, 4	; 5
 170:	08 95       	ret

00000172 <__vector_13>:
void timer_stop() {
	TCCR1B = 0;
}

#ifdef ENABLE_TIMER
ISR(TIMER1_COMPA_vect) {
 172:	1f 92       	push	r1
 174:	0f 92       	push	r0
 176:	0f b6       	in	r0, 0x3f	; 63
 178:	0f 92       	push	r0
 17a:	11 24       	eor	r1, r1
 17c:	0b b6       	in	r0, 0x3b	; 59
 17e:	0f 92       	push	r0
 180:	2f 93       	push	r18
 182:	3f 93       	push	r19
 184:	4f 93       	push	r20
 186:	5f 93       	push	r21
 188:	6f 93       	push	r22
 18a:	7f 93       	push	r23
 18c:	8f 93       	push	r24
 18e:	9f 93       	push	r25
 190:	af 93       	push	r26
 192:	bf 93       	push	r27
 194:	ef 93       	push	r30
 196:	ff 93       	push	r31
	_t_func();
 198:	e0 91 00 01 	lds	r30, 0x0100
 19c:	f0 91 01 01 	lds	r31, 0x0101
 1a0:	09 95       	icall
}
 1a2:	ff 91       	pop	r31
 1a4:	ef 91       	pop	r30
 1a6:	bf 91       	pop	r27
 1a8:	af 91       	pop	r26
 1aa:	9f 91       	pop	r25
 1ac:	8f 91       	pop	r24
 1ae:	7f 91       	pop	r23
 1b0:	6f 91       	pop	r22
 1b2:	5f 91       	pop	r21
 1b4:	4f 91       	pop	r20
 1b6:	3f 91       	pop	r19
 1b8:	2f 91       	pop	r18
 1ba:	0f 90       	pop	r0
 1bc:	0b be       	out	0x3b, r0	; 59
 1be:	0f 90       	pop	r0
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	0f 90       	pop	r0
 1c4:	1f 90       	pop	r1
 1c6:	18 95       	reti

000001c8 <_exit>:
 1c8:	f8 94       	cli

000001ca <__stop_program>:
 1ca:	ff cf       	rjmp	.-2      	; 0x1ca <__stop_program>
