
Sensormodul.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000101  00800100  00800100  00000422  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000422  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000d8  00000000  00000000  00000452  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000009de  00000000  00000000  0000052a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000004c1  00000000  00000000  00000f08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000075e  00000000  00000000  000013c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000268  00000000  00000000  00001b28  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000319  00000000  00000000  00001d90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000781  00000000  00000000  000020a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000a8  00000000  00000000  0000282a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	83 c1       	rjmp	.+774    	; 0x358 <__vector_20>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ea       	ldi	r30, 0xAE	; 174
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	22 e0       	ldi	r18, 0x02	; 2
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 30       	cpi	r26, 0x01	; 1
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	f3 d0       	rcall	.+486    	; 0x2aa <main>
  c4:	72 c1       	rjmp	.+740    	; 0x3aa <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <wait>:
 */ 
#include "display.h"
#include <util/delay.h>
int wait_time = 40;

void wait(int n){
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	00 d0       	rcall	.+0      	; 0xce <wait+0x6>
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
	
	volatile int a = 0;
  d2:	1a 82       	std	Y+2, r1	; 0x02
  d4:	19 82       	std	Y+1, r1	; 0x01
	while(a<n){a++;}
  d6:	29 81       	ldd	r18, Y+1	; 0x01
  d8:	3a 81       	ldd	r19, Y+2	; 0x02
  da:	28 17       	cp	r18, r24
  dc:	39 07       	cpc	r19, r25
  de:	5c f4       	brge	.+22     	; 0xf6 <wait+0x2e>
  e0:	29 81       	ldd	r18, Y+1	; 0x01
  e2:	3a 81       	ldd	r19, Y+2	; 0x02
  e4:	2f 5f       	subi	r18, 0xFF	; 255
  e6:	3f 4f       	sbci	r19, 0xFF	; 255
  e8:	3a 83       	std	Y+2, r19	; 0x02
  ea:	29 83       	std	Y+1, r18	; 0x01
  ec:	29 81       	ldd	r18, Y+1	; 0x01
  ee:	3a 81       	ldd	r19, Y+2	; 0x02
  f0:	28 17       	cp	r18, r24
  f2:	39 07       	cpc	r19, r25
  f4:	ac f3       	brlt	.-22     	; 0xe0 <wait+0x18>
}
  f6:	0f 90       	pop	r0
  f8:	0f 90       	pop	r0
  fa:	df 91       	pop	r29
  fc:	cf 91       	pop	r28
  fe:	08 95       	ret

00000100 <toggle_enable>:
	//toggle_enable();
}

void toggle_enable()
{
	PORTB |= (1 << DISP_E);
 100:	2a 9a       	sbi	0x05, 2	; 5
	wait(40);
 102:	88 e2       	ldi	r24, 0x28	; 40
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	e0 df       	rcall	.-64     	; 0xc8 <wait>
	//_delay_ms(42);
	PORTB &= ~(1 << DISP_E);
 108:	2a 98       	cbi	0x05, 2	; 5
	wait(40);
 10a:	88 e2       	ldi	r24, 0x28	; 40
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	dc cf       	rjmp	.-72     	; 0xc8 <wait>
 110:	08 95       	ret

00000112 <set_display>:
	//_delay_ms(42);
}


void set_display(int mode, int instr)
{	
 112:	0f 93       	push	r16
 114:	1f 93       	push	r17
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
	PORTB &= ~(1 << DISP_RS);
 11a:	28 98       	cbi	0x05, 0	; 5
	PORTB &= ~(1 << DISP_RW);
 11c:	29 98       	cbi	0x05, 1	; 5
	PORTC &= ~(1 << DISP_DB7);
 11e:	41 98       	cbi	0x08, 1	; 8
	PORTC &= ~(1 << DISP_DB6);
 120:	40 98       	cbi	0x08, 0	; 8
	PORTD &= ~(1 << DISP_DB5);
 122:	5f 98       	cbi	0x0b, 7	; 11
	PORTD &= ~(1 << DISP_DB4);
 124:	5e 98       	cbi	0x0b, 6	; 11
	PORTD &= ~(1 << DISP_DB3);
 126:	5d 98       	cbi	0x0b, 5	; 11
	PORTD &= ~(1 << DISP_DB2);
 128:	5c 98       	cbi	0x0b, 4	; 11
	PORTD &= ~(1 << DISP_DB1);
 12a:	5b 98       	cbi	0x0b, 3	; 11
	PORTD &= ~(1 << DISP_DB0);
 12c:	5a 98       	cbi	0x0b, 2	; 11
	
	PORTB |= (((mode >> 1) & 1) << DISP_RS);
 12e:	15 b1       	in	r17, 0x05	; 5
 130:	81 fb       	bst	r24, 1
 132:	00 27       	eor	r16, r16
 134:	00 f9       	bld	r16, 0
 136:	10 2b       	or	r17, r16
 138:	15 b9       	out	0x05, r17	; 5
	PORTB |= (((mode >> 0) & 1) << DISP_RW);
 13a:	15 b1       	in	r17, 0x05	; 5
 13c:	81 70       	andi	r24, 0x01	; 1
 13e:	99 27       	eor	r25, r25
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	81 2b       	or	r24, r17
 146:	85 b9       	out	0x05, r24	; 5
	//wait(40);
	PORTB |= (1 << DISP_E);
	//wait(150);
	_delay_us(150);
	*/
	PORTC |= (((instr >> 7) & 1) << DISP_DB7);
 148:	88 b1       	in	r24, 0x08	; 8
 14a:	67 fb       	bst	r22, 7
 14c:	99 27       	eor	r25, r25
 14e:	90 f9       	bld	r25, 0
 150:	c9 2f       	mov	r28, r25
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	d9 2f       	mov	r29, r25
 156:	cc 0f       	add	r28, r28
 158:	dd 1f       	adc	r29, r29
 15a:	c8 2b       	or	r28, r24
 15c:	c8 b9       	out	0x08, r28	; 8
	PORTC |= (((instr >> 6) & 1) << DISP_DB6);
 15e:	88 b1       	in	r24, 0x08	; 8
 160:	66 fb       	bst	r22, 6
 162:	99 27       	eor	r25, r25
 164:	90 f9       	bld	r25, 0
 166:	89 2b       	or	r24, r25
 168:	88 b9       	out	0x08, r24	; 8
	PORTD |= (((instr >> 5) & 1) << DISP_DB5);
 16a:	1b b1       	in	r17, 0x0b	; 11
 16c:	eb 01       	movw	r28, r22
 16e:	d5 95       	asr	r29
 170:	c7 95       	ror	r28
 172:	d5 95       	asr	r29
 174:	c7 95       	ror	r28
 176:	d5 95       	asr	r29
 178:	c7 95       	ror	r28
 17a:	d5 95       	asr	r29
 17c:	c7 95       	ror	r28
 17e:	d5 95       	asr	r29
 180:	c7 95       	ror	r28
 182:	ce 01       	movw	r24, r28
 184:	96 95       	lsr	r25
 186:	98 2f       	mov	r25, r24
 188:	88 27       	eor	r24, r24
 18a:	97 95       	ror	r25
 18c:	87 95       	ror	r24
 18e:	81 2b       	or	r24, r17
 190:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (((instr >> 4) & 1) << DISP_DB4);
 192:	8b b1       	in	r24, 0x0b	; 11
 194:	64 fb       	bst	r22, 4
 196:	aa 27       	eor	r26, r26
 198:	a0 f9       	bld	r26, 0
 19a:	b0 e0       	ldi	r27, 0x00	; 0
 19c:	00 24       	eor	r0, r0
 19e:	b6 95       	lsr	r27
 1a0:	a7 95       	ror	r26
 1a2:	07 94       	ror	r0
 1a4:	b6 95       	lsr	r27
 1a6:	a7 95       	ror	r26
 1a8:	07 94       	ror	r0
 1aa:	ba 2f       	mov	r27, r26
 1ac:	a0 2d       	mov	r26, r0
 1ae:	a8 2b       	or	r26, r24
 1b0:	ab b9       	out	0x0b, r26	; 11
	PORTD |= (((instr >> 3) & 1) << DISP_DB3);
 1b2:	8b b1       	in	r24, 0x0b	; 11
 1b4:	63 fb       	bst	r22, 3
 1b6:	ee 27       	eor	r30, r30
 1b8:	e0 f9       	bld	r30, 0
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	ee 0f       	add	r30, r30
 1be:	ff 1f       	adc	r31, r31
 1c0:	e2 95       	swap	r30
 1c2:	f2 95       	swap	r31
 1c4:	f0 7f       	andi	r31, 0xF0	; 240
 1c6:	fe 27       	eor	r31, r30
 1c8:	e0 7f       	andi	r30, 0xF0	; 240
 1ca:	fe 27       	eor	r31, r30
 1cc:	e8 2b       	or	r30, r24
 1ce:	eb b9       	out	0x0b, r30	; 11
	PORTD |= (((instr >> 2) & 1) << DISP_DB2);
 1d0:	8b b1       	in	r24, 0x0b	; 11
 1d2:	62 fb       	bst	r22, 2
 1d4:	44 27       	eor	r20, r20
 1d6:	40 f9       	bld	r20, 0
 1d8:	50 e0       	ldi	r21, 0x00	; 0
 1da:	42 95       	swap	r20
 1dc:	52 95       	swap	r21
 1de:	50 7f       	andi	r21, 0xF0	; 240
 1e0:	54 27       	eor	r21, r20
 1e2:	40 7f       	andi	r20, 0xF0	; 240
 1e4:	54 27       	eor	r21, r20
 1e6:	48 2b       	or	r20, r24
 1e8:	4b b9       	out	0x0b, r20	; 11
	PORTD |= (((instr >> 1) & 1) << DISP_DB1);
 1ea:	8b b1       	in	r24, 0x0b	; 11
 1ec:	61 fb       	bst	r22, 1
 1ee:	22 27       	eor	r18, r18
 1f0:	20 f9       	bld	r18, 0
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	22 0f       	add	r18, r18
 1f6:	33 1f       	adc	r19, r19
 1f8:	22 0f       	add	r18, r18
 1fa:	33 1f       	adc	r19, r19
 1fc:	22 0f       	add	r18, r18
 1fe:	33 1f       	adc	r19, r19
 200:	28 2b       	or	r18, r24
 202:	2b b9       	out	0x0b, r18	; 11
	PORTD |= (((instr >> 0) & 1) << DISP_DB0);
 204:	8b b1       	in	r24, 0x0b	; 11
 206:	61 70       	andi	r22, 0x01	; 1
 208:	77 27       	eor	r23, r23
 20a:	66 0f       	add	r22, r22
 20c:	77 1f       	adc	r23, r23
 20e:	66 0f       	add	r22, r22
 210:	77 1f       	adc	r23, r23
 212:	68 2b       	or	r22, r24
 214:	6b b9       	out	0x0b, r22	; 11
/*	_delay_us(80);
	//wait(80);
	PORTB &= ~(1 << DISP_E);
	//wait(250);
	_delay_us(250);*/
}
 216:	df 91       	pop	r29
 218:	cf 91       	pop	r28
 21a:	1f 91       	pop	r17
 21c:	0f 91       	pop	r16
 21e:	08 95       	ret

00000220 <clear_display>:

}

void clear_display()
{
	set_display(0x00, 0x01);
 220:	61 e0       	ldi	r22, 0x01	; 1
 222:	70 e0       	ldi	r23, 0x00	; 0
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	74 cf       	rjmp	.-280    	; 0x112 <set_display>
 22a:	08 95       	ret

0000022c <init_display>:
	while(a<n){a++;}
}

void init_display()
{
		DDRB |= (1 << DISP_RS);
 22c:	20 9a       	sbi	0x04, 0	; 4
		DDRB |= (1 << DISP_RW);
 22e:	21 9a       	sbi	0x04, 1	; 4
		DDRB |= (1 << DISP_E);
 230:	22 9a       	sbi	0x04, 2	; 4
		DDRC |= (1 << DISP_DB7);
 232:	39 9a       	sbi	0x07, 1	; 7
		DDRC |= (1 << DISP_DB6);
 234:	38 9a       	sbi	0x07, 0	; 7
		DDRD |= (1 << DISP_DB5);
 236:	57 9a       	sbi	0x0a, 7	; 10
		DDRD |= (1 << DISP_DB4);
 238:	56 9a       	sbi	0x0a, 6	; 10
		DDRD |= (1 << DISP_DB3);
 23a:	55 9a       	sbi	0x0a, 5	; 10
		DDRD |= (1 << DISP_DB2);
 23c:	54 9a       	sbi	0x0a, 4	; 10
		DDRD |= (1 << DISP_DB1);
 23e:	53 9a       	sbi	0x0a, 3	; 10
		DDRD |= (1 << DISP_DB0);
 240:	52 9a       	sbi	0x0a, 2	; 10
		
		PORTB &= ~(1 << DISP_E);
 242:	2a 98       	cbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 244:	2f ef       	ldi	r18, 0xFF	; 255
 246:	89 e6       	ldi	r24, 0x69	; 105
 248:	98 e1       	ldi	r25, 0x18	; 24
 24a:	21 50       	subi	r18, 0x01	; 1
 24c:	80 40       	sbci	r24, 0x00	; 0
 24e:	90 40       	sbci	r25, 0x00	; 0
 250:	e1 f7       	brne	.-8      	; 0x24a <init_display+0x1e>
 252:	00 c0       	rjmp	.+0      	; 0x254 <init_display+0x28>
 254:	00 00       	nop
		_delay_ms(1000);
	
		// Function set
		set_display(0x00, 0x38);
 256:	68 e3       	ldi	r22, 0x38	; 56
 258:	70 e0       	ldi	r23, 0x00	; 0
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	59 df       	rcall	.-334    	; 0x112 <set_display>
		toggle_enable();
 260:	4f df       	rcall	.-354    	; 0x100 <toggle_enable>

		// Display on
		set_display(0x00, 0x0F);
 262:	6f e0       	ldi	r22, 0x0F	; 15
 264:	70 e0       	ldi	r23, 0x00	; 0
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	53 df       	rcall	.-346    	; 0x112 <set_display>
		toggle_enable();
 26c:	49 df       	rcall	.-366    	; 0x100 <toggle_enable>
		
		// Clear display
		clear_display();
 26e:	d8 df       	rcall	.-80     	; 0x220 <clear_display>
		toggle_enable();
 270:	47 df       	rcall	.-370    	; 0x100 <toggle_enable>
		wait(2000);
 272:	80 ed       	ldi	r24, 0xD0	; 208
 274:	97 e0       	ldi	r25, 0x07	; 7
 276:	28 df       	rcall	.-432    	; 0xc8 <wait>
	
		// Entry mode
		set_display(0x00, 0x06);
 278:	66 e0       	ldi	r22, 0x06	; 6
 27a:	70 e0       	ldi	r23, 0x00	; 0
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	48 df       	rcall	.-368    	; 0x112 <set_display>
		//_delay_us(1000);
		toggle_enable();
 282:	3e df       	rcall	.-388    	; 0x100 <toggle_enable>
		wait(2000);
 284:	80 ed       	ldi	r24, 0xD0	; 208
 286:	97 e0       	ldi	r25, 0x07	; 7
 288:	1f df       	rcall	.-450    	; 0xc8 <wait>
		
		//write 4
		set_display(0x00,0x82);
 28a:	62 e8       	ldi	r22, 0x82	; 130
 28c:	70 e0       	ldi	r23, 0x00	; 0
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	3f df       	rcall	.-386    	; 0x112 <set_display>
		toggle_enable();
 294:	35 df       	rcall	.-406    	; 0x100 <toggle_enable>
		set_display(0x02,0x34);
 296:	64 e3       	ldi	r22, 0x34	; 52
 298:	70 e0       	ldi	r23, 0x00	; 0
 29a:	82 e0       	ldi	r24, 0x02	; 2
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	39 df       	rcall	.-398    	; 0x112 <set_display>
		toggle_enable();
 2a0:	2f df       	rcall	.-418    	; 0x100 <toggle_enable>
		wait(40);
 2a2:	88 e2       	ldi	r24, 0x28	; 40
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	10 cf       	rjmp	.-480    	; 0xc8 <wait>
 2a8:	08 95       	ret

000002aa <main>:
 2aa:	8f e5       	ldi	r24, 0x5F	; 95
 2ac:	9a ee       	ldi	r25, 0xEA	; 234
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <main+0x4>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <main+0xa>
 2b4:	00 00       	nop
	//init_sensors();
	//setup_spi();
	//activateADC();
	
	_delay_ms(30);
	init_display();
 2b6:	ba df       	rcall	.-140    	; 0x22c <init_display>
 2b8:	ff cf       	rjmp	.-2      	; 0x2b8 <main+0xe>

000002ba <uart_read_char>:
}

void uart_send_char(uint8_t data)
{
	while(!bit_is_set(UCSR0A, UDRE0));
	UDR0 = data;
 2ba:	e0 ec       	ldi	r30, 0xC0	; 192
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	80 81       	ld	r24, Z
 2c0:	88 23       	and	r24, r24
 2c2:	ec f7       	brge	.-6      	; 0x2be <uart_read_char+0x4>
 2c4:	80 91 c6 00 	lds	r24, 0x00C6
 2c8:	08 95       	ret

000002ca <uart_read_string>:
}

int uart_read_string(char *s, int size)
{
 2ca:	cf 92       	push	r12
 2cc:	df 92       	push	r13
 2ce:	ef 92       	push	r14
 2d0:	ff 92       	push	r15
 2d2:	0f 93       	push	r16
 2d4:	1f 93       	push	r17
 2d6:	cf 93       	push	r28
 2d8:	df 93       	push	r29
 2da:	8c 01       	movw	r16, r24
	uint8_t i = 0;
	char c;
	
	while(i < size - 1){
 2dc:	7b 01       	movw	r14, r22
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	e8 1a       	sub	r14, r24
 2e2:	f1 08       	sbc	r15, r1
 2e4:	1e 14       	cp	r1, r14
 2e6:	1f 04       	cpc	r1, r15
 2e8:	cc f4       	brge	.+50     	; 0x31c <uart_read_string+0x52>
 2ea:	c0 e0       	ldi	r28, 0x00	; 0
 2ec:	d0 e0       	ldi	r29, 0x00	; 0
	UDR0 = data;
}

int uart_read_string(char *s, int size)
{
	uint8_t i = 0;
 2ee:	d1 2c       	mov	r13, r1
	while(i < size - 1){
		c = uart_read_char();
		if(c == '\0')
			break;
		else if(c == '#'){
			i = 0;
 2f0:	c1 2c       	mov	r12, r1
{
	uint8_t i = 0;
	char c;
	
	while(i < size - 1){
		c = uart_read_char();
 2f2:	e3 df       	rcall	.-58     	; 0x2ba <uart_read_char>
		if(c == '\0')
 2f4:	88 23       	and	r24, r24
 2f6:	a9 f0       	breq	.+42     	; 0x322 <uart_read_string+0x58>
			break;
		else if(c == '#'){
 2f8:	83 32       	cpi	r24, 0x23	; 35
 2fa:	11 f0       	breq	.+4      	; 0x300 <uart_read_string+0x36>
 2fc:	9d 2d       	mov	r25, r13
 2fe:	01 c0       	rjmp	.+2      	; 0x302 <uart_read_string+0x38>
			i = 0;
 300:	9c 2d       	mov	r25, r12
		}
		s[i++] = c;
 302:	dd 24       	eor	r13, r13
 304:	d3 94       	inc	r13
 306:	d9 0e       	add	r13, r25
 308:	f8 01       	movw	r30, r16
 30a:	e9 0f       	add	r30, r25
 30c:	f1 1d       	adc	r31, r1
 30e:	80 83       	st	Z, r24
int uart_read_string(char *s, int size)
{
	uint8_t i = 0;
	char c;
	
	while(i < size - 1){
 310:	cd 2d       	mov	r28, r13
 312:	d0 e0       	ldi	r29, 0x00	; 0
 314:	ce 15       	cp	r28, r14
 316:	df 05       	cpc	r29, r15
 318:	64 f3       	brlt	.-40     	; 0x2f2 <uart_read_string+0x28>
 31a:	03 c0       	rjmp	.+6      	; 0x322 <uart_read_string+0x58>
 31c:	c0 e0       	ldi	r28, 0x00	; 0
 31e:	d0 e0       	ldi	r29, 0x00	; 0
	UDR0 = data;
}

int uart_read_string(char *s, int size)
{
	uint8_t i = 0;
 320:	d1 2c       	mov	r13, r1
			i = 0;
		}
		s[i++] = c;
	}
	
	s[i] = 0;
 322:	f8 01       	movw	r30, r16
 324:	ed 0d       	add	r30, r13
 326:	f1 1d       	adc	r31, r1
 328:	10 82       	st	Z, r1
	
	return i + 1;
}
 32a:	ce 01       	movw	r24, r28
 32c:	01 96       	adiw	r24, 0x01	; 1
 32e:	df 91       	pop	r29
 330:	cf 91       	pop	r28
 332:	1f 91       	pop	r17
 334:	0f 91       	pop	r16
 336:	ff 90       	pop	r15
 338:	ef 90       	pop	r14
 33a:	df 90       	pop	r13
 33c:	cf 90       	pop	r12
 33e:	08 95       	ret

00000340 <check_rx>:
	set_bit(UCSR0B, RXCIE0);
	UCSR0C = (3 << UCSZ00);
}

void check_rx() {
	if (bit_is_set(UCSR0A, RXC0)){
 340:	80 91 c0 00 	lds	r24, 0x00C0
 344:	88 23       	and	r24, r24
 346:	3c f4       	brge	.+14     	; 0x356 <check_rx+0x16>
		buffer_size = uart_read_string(buffer, 255);
 348:	6f ef       	ldi	r22, 0xFF	; 255
 34a:	70 e0       	ldi	r23, 0x00	; 0
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	91 e0       	ldi	r25, 0x01	; 1
 350:	bc df       	rcall	.-136    	; 0x2ca <uart_read_string>
 352:	80 93 00 01 	sts	0x0100, r24
 356:	08 95       	ret

00000358 <__vector_20>:
	}
}

ISR(USART0_RX_vect){
 358:	1f 92       	push	r1
 35a:	0f 92       	push	r0
 35c:	0f b6       	in	r0, 0x3f	; 63
 35e:	0f 92       	push	r0
 360:	11 24       	eor	r1, r1
 362:	0b b6       	in	r0, 0x3b	; 59
 364:	0f 92       	push	r0
 366:	2f 93       	push	r18
 368:	3f 93       	push	r19
 36a:	4f 93       	push	r20
 36c:	5f 93       	push	r21
 36e:	6f 93       	push	r22
 370:	7f 93       	push	r23
 372:	8f 93       	push	r24
 374:	9f 93       	push	r25
 376:	af 93       	push	r26
 378:	bf 93       	push	r27
 37a:	ef 93       	push	r30
 37c:	ff 93       	push	r31
	cli();
 37e:	f8 94       	cli
	check_rx();
 380:	df df       	rcall	.-66     	; 0x340 <check_rx>
	sei();
 382:	78 94       	sei
}
 384:	ff 91       	pop	r31
 386:	ef 91       	pop	r30
 388:	bf 91       	pop	r27
 38a:	af 91       	pop	r26
 38c:	9f 91       	pop	r25
 38e:	8f 91       	pop	r24
 390:	7f 91       	pop	r23
 392:	6f 91       	pop	r22
 394:	5f 91       	pop	r21
 396:	4f 91       	pop	r20
 398:	3f 91       	pop	r19
 39a:	2f 91       	pop	r18
 39c:	0f 90       	pop	r0
 39e:	0b be       	out	0x3b, r0	; 59
 3a0:	0f 90       	pop	r0
 3a2:	0f be       	out	0x3f, r0	; 63
 3a4:	0f 90       	pop	r0
 3a6:	1f 90       	pop	r1
 3a8:	18 95       	reti

000003aa <_exit>:
 3aa:	f8 94       	cli

000003ac <__stop_program>:
 3ac:	ff cf       	rjmp	.-2      	; 0x3ac <__stop_program>
