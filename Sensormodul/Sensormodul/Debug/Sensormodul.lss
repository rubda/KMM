
Sensormodul.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000106  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  0000015a  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000068  00000000  00000000  0000018a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000002d0  00000000  00000000  000001f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001b4  00000000  00000000  000004c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000002f2  00000000  00000000  00000676  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000098  00000000  00000000  00000968  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001a7  00000000  00000000  00000a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000003e  00000000  00000000  00000ba7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000be5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	33 c0       	rjmp	.+102    	; 0x102 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
#include <util/delay.h>


int main(void)
{
	setup_spi();
  9e:	0e d0       	rcall	.+28     	; 0xbc <setup_spi>


    while(1)
    {	
		
		ss_low();
  a0:	2c d0       	rcall	.+88     	; 0xfa <ss_low>
		
		send_spi(ACTIVATE_ADC);	
  a2:	84 e9       	ldi	r24, 0x94	; 148
  a4:	24 d0       	rcall	.+72     	; 0xee <send_spi>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	84 e1       	ldi	r24, 0x14	; 20
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <main+0xc>
  ae:	00 00       	nop
		
		_delay_us(150);
		
		send_spi(START_CONVERSION);
  b0:	84 e9       	ldi	r24, 0x94	; 148
  b2:	1d d0       	rcall	.+58     	; 0xee <send_spi>
		
		send_spi(POLL);
  b4:	80 e8       	ldi	r24, 0x80	; 128
  b6:	1b d0       	rcall	.+54     	; 0xee <send_spi>
		
		ss_high();
  b8:	22 d0       	rcall	.+68     	; 0xfe <ss_high>
  ba:	f2 cf       	rjmp	.-28     	; 0xa0 <main+0x2>

000000bc <setup_spi>:

uint8_t get_spi(uint8_t data)
{
	SPDR = data;
	return SPDR;
}
  bc:	8c b5       	in	r24, 0x2c	; 44
  be:	80 61       	ori	r24, 0x10	; 16
  c0:	8c bd       	out	0x2c, r24	; 44
  c2:	8c b5       	in	r24, 0x2c	; 44
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	8c bd       	out	0x2c, r24	; 44
  c8:	8c b5       	in	r24, 0x2c	; 44
  ca:	8c bd       	out	0x2c, r24	; 44
  cc:	8c b5       	in	r24, 0x2c	; 44
  ce:	88 60       	ori	r24, 0x08	; 8
  d0:	8c bd       	out	0x2c, r24	; 44
  d2:	8c b5       	in	r24, 0x2c	; 44
  d4:	84 60       	ori	r24, 0x04	; 4
  d6:	8c bd       	out	0x2c, r24	; 44
  d8:	8c b5       	in	r24, 0x2c	; 44
  da:	8e 7f       	andi	r24, 0xFE	; 254
  dc:	8c bd       	out	0x2c, r24	; 44
  de:	8c b5       	in	r24, 0x2c	; 44
  e0:	8d 7f       	andi	r24, 0xFD	; 253
  e2:	8c bd       	out	0x2c, r24	; 44
  e4:	25 9a       	sbi	0x04, 5	; 4
  e6:	26 98       	cbi	0x04, 6	; 4
  e8:	24 9a       	sbi	0x04, 4	; 4
  ea:	27 9a       	sbi	0x04, 7	; 4
  ec:	08 95       	ret

000000ee <send_spi>:
  ee:	8e bd       	out	0x2e, r24	; 46
  f0:	0d b4       	in	r0, 0x2d	; 45
  f2:	07 fe       	sbrs	r0, 7
  f4:	fd cf       	rjmp	.-6      	; 0xf0 <send_spi+0x2>
  f6:	8e b5       	in	r24, 0x2e	; 46
  f8:	08 95       	ret

000000fa <ss_low>:

void ss_low()
{
	PORTB &= ~(1 << SPI_SS_PIN);
  fa:	2c 98       	cbi	0x05, 4	; 5
  fc:	08 95       	ret

000000fe <ss_high>:
}	

void ss_high()
{
	PORTB |= (1 << SPI_SS_PIN);
  fe:	2c 9a       	sbi	0x05, 4	; 5
 100:	08 95       	ret

00000102 <_exit>:
 102:	f8 94       	cli

00000104 <__stop_program>:
 104:	ff cf       	rjmp	.-2      	; 0x104 <__stop_program>
