
Sensormodul.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000254  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000103  00800100  00800100  000002c8  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000c0  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000071f  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000435  00000000  00000000  00000ad7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000059f  00000000  00000000  00000f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000254  00000000  00000000  000014ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002d2  00000000  00000000  00001700  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000006f6  00000000  00000000  000019d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000090  00000000  00000000  000020c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	4d c0       	rjmp	.+154    	; 0xd0 <__vector_13>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	d6 c0       	rjmp	.+428    	; 0x1fe <__vector_20>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	22 e0       	ldi	r18, 0x02	; 2
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a3 30       	cpi	r26, 0x03	; 3
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	02 d0       	rcall	.+4      	; 0xae <main>
  aa:	d2 c0       	rjmp	.+420    	; 0x250 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <main>:


int main(void)
{

	uart_init(1200);
  ae:	60 eb       	ldi	r22, 0xB0	; 176
  b0:	74 e0       	ldi	r23, 0x04	; 4
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	37 d0       	rcall	.+110    	; 0x126 <uart_init>
	//uart_send_char('A');
	while(1)
    {

		uart_send_char('P');
  b8:	80 e5       	ldi	r24, 0x50	; 80
  ba:	52 d0       	rcall	.+164    	; 0x160 <uart_send_char>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	2f ef       	ldi	r18, 0xFF	; 255
  be:	89 e6       	ldi	r24, 0x69	; 105
  c0:	98 e1       	ldi	r25, 0x18	; 24
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	80 40       	sbci	r24, 0x00	; 0
  c6:	90 40       	sbci	r25, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <main+0x14>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x1e>
  cc:	00 00       	nop
  ce:	f4 cf       	rjmp	.-24     	; 0xb8 <main+0xa>

000000d0 <__vector_13>:
void timer_stop() {
	TCCR1B = 0;
}

#ifdef ENABLE_TIMER
ISR(TIMER1_COMPA_vect) {
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	0b b6       	in	r0, 0x3b	; 59
  dc:	0f 92       	push	r0
  de:	2f 93       	push	r18
  e0:	3f 93       	push	r19
  e2:	4f 93       	push	r20
  e4:	5f 93       	push	r21
  e6:	6f 93       	push	r22
  e8:	7f 93       	push	r23
  ea:	8f 93       	push	r24
  ec:	9f 93       	push	r25
  ee:	af 93       	push	r26
  f0:	bf 93       	push	r27
  f2:	ef 93       	push	r30
  f4:	ff 93       	push	r31
	_t_func();
  f6:	e0 91 01 01 	lds	r30, 0x0101
  fa:	f0 91 02 01 	lds	r31, 0x0102
  fe:	09 95       	icall
}
 100:	ff 91       	pop	r31
 102:	ef 91       	pop	r30
 104:	bf 91       	pop	r27
 106:	af 91       	pop	r26
 108:	9f 91       	pop	r25
 10a:	8f 91       	pop	r24
 10c:	7f 91       	pop	r23
 10e:	6f 91       	pop	r22
 110:	5f 91       	pop	r21
 112:	4f 91       	pop	r20
 114:	3f 91       	pop	r19
 116:	2f 91       	pop	r18
 118:	0f 90       	pop	r0
 11a:	0b be       	out	0x3b, r0	; 59
 11c:	0f 90       	pop	r0
 11e:	0f be       	out	0x3f, r0	; 63
 120:	0f 90       	pop	r0
 122:	1f 90       	pop	r1
 124:	18 95       	reti

00000126 <uart_init>:

void uart_init(long baud)
{
	// Initialize serial
	//UBRR0 = ((F_CPU / 16 + baud / 2) / baud - 1);         /* (16 MHz / 16 / 38400) - 1 */
	UBRR0 = 0x01A0;
 126:	80 ea       	ldi	r24, 0xA0	; 160
 128:	91 e0       	ldi	r25, 0x01	; 1
 12a:	90 93 c5 00 	sts	0x00C5, r25
 12e:	80 93 c4 00 	sts	0x00C4, r24
	set_bit(UCSR0B, RXEN0);                               /* enable RX */
 132:	e1 ec       	ldi	r30, 0xC1	; 193
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	80 61       	ori	r24, 0x10	; 16
 13a:	80 83       	st	Z, r24
	set_bit(UCSR0B, TXEN0);                               /* enable TX */
 13c:	80 81       	ld	r24, Z
 13e:	88 60       	ori	r24, 0x08	; 8
 140:	80 83       	st	Z, r24

	set_bit(UCSR0B, RXCIE0);
 142:	80 81       	ld	r24, Z
 144:	80 68       	ori	r24, 0x80	; 128
 146:	80 83       	st	Z, r24
	UCSR0C = (3 << UCSZ00);
 148:	86 e0       	ldi	r24, 0x06	; 6
 14a:	80 93 c2 00 	sts	0x00C2, r24
 14e:	08 95       	ret

00000150 <uart_read_char>:
	sei();
}

char uart_read_char()
{
	while(!bit_is_set(UCSR0A, RXC0));
 150:	e0 ec       	ldi	r30, 0xC0	; 192
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	88 23       	and	r24, r24
 158:	ec f7       	brge	.-6      	; 0x154 <uart_read_char+0x4>
	return UDR0;
 15a:	80 91 c6 00 	lds	r24, 0x00C6
}
 15e:	08 95       	ret

00000160 <uart_send_char>:

void uart_send_char(uint8_t data)
{
	while(!bit_is_set(UCSR0A, UDRE0));
 160:	e0 ec       	ldi	r30, 0xC0	; 192
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	90 81       	ld	r25, Z
 166:	95 ff       	sbrs	r25, 5
 168:	fd cf       	rjmp	.-6      	; 0x164 <uart_send_char+0x4>
	UDR0 = data;
 16a:	80 93 c6 00 	sts	0x00C6, r24
 16e:	08 95       	ret

00000170 <uart_read_string>:
}

int uart_read_string(char *s, int size)
{
 170:	cf 92       	push	r12
 172:	df 92       	push	r13
 174:	ef 92       	push	r14
 176:	ff 92       	push	r15
 178:	0f 93       	push	r16
 17a:	1f 93       	push	r17
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	8c 01       	movw	r16, r24
	uint8_t i = 0;
	char c;
	
	while(i < size - 1){
 182:	7b 01       	movw	r14, r22
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	e8 1a       	sub	r14, r24
 188:	f1 08       	sbc	r15, r1
 18a:	1e 14       	cp	r1, r14
 18c:	1f 04       	cpc	r1, r15
 18e:	cc f4       	brge	.+50     	; 0x1c2 <uart_read_string+0x52>
 190:	c0 e0       	ldi	r28, 0x00	; 0
 192:	d0 e0       	ldi	r29, 0x00	; 0
	UDR0 = data;
}

int uart_read_string(char *s, int size)
{
	uint8_t i = 0;
 194:	d1 2c       	mov	r13, r1
	while(i < size - 1){
		c = uart_read_char();
		if(c == '\0')
			break;
		else if(c == '#'){
			i = 0;
 196:	c1 2c       	mov	r12, r1
{
	uint8_t i = 0;
	char c;
	
	while(i < size - 1){
		c = uart_read_char();
 198:	db df       	rcall	.-74     	; 0x150 <uart_read_char>
		if(c == '\0')
 19a:	88 23       	and	r24, r24
 19c:	a9 f0       	breq	.+42     	; 0x1c8 <uart_read_string+0x58>
			break;
		else if(c == '#'){
 19e:	83 32       	cpi	r24, 0x23	; 35
 1a0:	11 f0       	breq	.+4      	; 0x1a6 <uart_read_string+0x36>
 1a2:	9d 2d       	mov	r25, r13
 1a4:	01 c0       	rjmp	.+2      	; 0x1a8 <uart_read_string+0x38>
			i = 0;
 1a6:	9c 2d       	mov	r25, r12
		}
		s[i++] = c;
 1a8:	dd 24       	eor	r13, r13
 1aa:	d3 94       	inc	r13
 1ac:	d9 0e       	add	r13, r25
 1ae:	f8 01       	movw	r30, r16
 1b0:	e9 0f       	add	r30, r25
 1b2:	f1 1d       	adc	r31, r1
 1b4:	80 83       	st	Z, r24
int uart_read_string(char *s, int size)
{
	uint8_t i = 0;
	char c;
	
	while(i < size - 1){
 1b6:	cd 2d       	mov	r28, r13
 1b8:	d0 e0       	ldi	r29, 0x00	; 0
 1ba:	ce 15       	cp	r28, r14
 1bc:	df 05       	cpc	r29, r15
 1be:	64 f3       	brlt	.-40     	; 0x198 <uart_read_string+0x28>
 1c0:	03 c0       	rjmp	.+6      	; 0x1c8 <uart_read_string+0x58>
 1c2:	c0 e0       	ldi	r28, 0x00	; 0
 1c4:	d0 e0       	ldi	r29, 0x00	; 0
	UDR0 = data;
}

int uart_read_string(char *s, int size)
{
	uint8_t i = 0;
 1c6:	d1 2c       	mov	r13, r1
			i = 0;
		}
		s[i++] = c;
	}
	
	s[i] = 0;
 1c8:	f8 01       	movw	r30, r16
 1ca:	ed 0d       	add	r30, r13
 1cc:	f1 1d       	adc	r31, r1
 1ce:	10 82       	st	Z, r1
	
	return i + 1;
}
 1d0:	ce 01       	movw	r24, r28
 1d2:	01 96       	adiw	r24, 0x01	; 1
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
 1d8:	1f 91       	pop	r17
 1da:	0f 91       	pop	r16
 1dc:	ff 90       	pop	r15
 1de:	ef 90       	pop	r14
 1e0:	df 90       	pop	r13
 1e2:	cf 90       	pop	r12
 1e4:	08 95       	ret

000001e6 <check_rx>:
	set_bit(UCSR0B, RXCIE0);
	UCSR0C = (3 << UCSZ00);
}

void check_rx() {
	if (bit_is_set(UCSR0A, RXC0)){
 1e6:	80 91 c0 00 	lds	r24, 0x00C0
 1ea:	88 23       	and	r24, r24
 1ec:	3c f4       	brge	.+14     	; 0x1fc <check_rx+0x16>
		buffer_size = uart_read_string(buffer, 255);
 1ee:	6f ef       	ldi	r22, 0xFF	; 255
 1f0:	70 e0       	ldi	r23, 0x00	; 0
 1f2:	83 e0       	ldi	r24, 0x03	; 3
 1f4:	91 e0       	ldi	r25, 0x01	; 1
 1f6:	bc df       	rcall	.-136    	; 0x170 <uart_read_string>
 1f8:	80 93 00 01 	sts	0x0100, r24
 1fc:	08 95       	ret

000001fe <__vector_20>:
	}
}

ISR(USART0_RX_vect){
 1fe:	1f 92       	push	r1
 200:	0f 92       	push	r0
 202:	0f b6       	in	r0, 0x3f	; 63
 204:	0f 92       	push	r0
 206:	11 24       	eor	r1, r1
 208:	0b b6       	in	r0, 0x3b	; 59
 20a:	0f 92       	push	r0
 20c:	2f 93       	push	r18
 20e:	3f 93       	push	r19
 210:	4f 93       	push	r20
 212:	5f 93       	push	r21
 214:	6f 93       	push	r22
 216:	7f 93       	push	r23
 218:	8f 93       	push	r24
 21a:	9f 93       	push	r25
 21c:	af 93       	push	r26
 21e:	bf 93       	push	r27
 220:	ef 93       	push	r30
 222:	ff 93       	push	r31
	cli();
 224:	f8 94       	cli
	check_rx();
 226:	df df       	rcall	.-66     	; 0x1e6 <check_rx>
	sei();
 228:	78 94       	sei
}
 22a:	ff 91       	pop	r31
 22c:	ef 91       	pop	r30
 22e:	bf 91       	pop	r27
 230:	af 91       	pop	r26
 232:	9f 91       	pop	r25
 234:	8f 91       	pop	r24
 236:	7f 91       	pop	r23
 238:	6f 91       	pop	r22
 23a:	5f 91       	pop	r21
 23c:	4f 91       	pop	r20
 23e:	3f 91       	pop	r19
 240:	2f 91       	pop	r18
 242:	0f 90       	pop	r0
 244:	0b be       	out	0x3b, r0	; 59
 246:	0f 90       	pop	r0
 248:	0f be       	out	0x3f, r0	; 63
 24a:	0f 90       	pop	r0
 24c:	1f 90       	pop	r1
 24e:	18 95       	reti

00000250 <_exit>:
 250:	f8 94       	cli

00000252 <__stop_program>:
 252:	ff cf       	rjmp	.-2      	; 0x252 <__stop_program>
