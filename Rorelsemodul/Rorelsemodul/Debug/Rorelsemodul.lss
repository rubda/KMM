
Rorelsemodul.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000027c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00800100  00800100  000002f0  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000118  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000009c0  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000393  00000000  00000000  00000df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000007b0  00000000  00000000  0000118b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000003d8  00000000  00000000  0000193c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000039d  00000000  00000000  00001d14  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000bcb  00000000  00000000  000020b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000e8  00000000  00000000  00002c7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	9a c0       	rjmp	.+308    	; 0x15a <__vector_9>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	67 c0       	rjmp	.+206    	; 0x104 <__vector_13>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	36 c0       	rjmp	.+108    	; 0xae <__vector_16>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	a5 c0       	rjmp	.+330    	; 0x1c4 <__vector_30>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a6 30       	cpi	r26, 0x06	; 6
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	83 d0       	rcall	.+262    	; 0x1b0 <main>
  aa:	e6 c0       	rjmp	.+460    	; 0x278 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_16>:
	TCNT2 = 0;
	TIMSK2 |= _BV(OCIE2A);
}

void timer2_stop() {
	TCCR2B = 0;
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	0b b6       	in	r0, 0x3b	; 59
  ba:	0f 92       	push	r0
  bc:	2f 93       	push	r18
  be:	3f 93       	push	r19
  c0:	4f 93       	push	r20
  c2:	5f 93       	push	r21
  c4:	6f 93       	push	r22
  c6:	7f 93       	push	r23
  c8:	8f 93       	push	r24
  ca:	9f 93       	push	r25
  cc:	af 93       	push	r26
  ce:	bf 93       	push	r27
  d0:	ef 93       	push	r30
  d2:	ff 93       	push	r31
  d4:	e0 91 00 01 	lds	r30, 0x0100
  d8:	f0 91 01 01 	lds	r31, 0x0101
  dc:	09 95       	icall
  de:	ff 91       	pop	r31
  e0:	ef 91       	pop	r30
  e2:	bf 91       	pop	r27
  e4:	af 91       	pop	r26
  e6:	9f 91       	pop	r25
  e8:	8f 91       	pop	r24
  ea:	7f 91       	pop	r23
  ec:	6f 91       	pop	r22
  ee:	5f 91       	pop	r21
  f0:	4f 91       	pop	r20
  f2:	3f 91       	pop	r19
  f4:	2f 91       	pop	r18
  f6:	0f 90       	pop	r0
  f8:	0b be       	out	0x3b, r0	; 59
  fa:	0f 90       	pop	r0
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	0f 90       	pop	r0
 100:	1f 90       	pop	r1
 102:	18 95       	reti

00000104 <__vector_13>:
 104:	1f 92       	push	r1
 106:	0f 92       	push	r0
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	0f 92       	push	r0
 10c:	11 24       	eor	r1, r1
 10e:	0b b6       	in	r0, 0x3b	; 59
 110:	0f 92       	push	r0
 112:	2f 93       	push	r18
 114:	3f 93       	push	r19
 116:	4f 93       	push	r20
 118:	5f 93       	push	r21
 11a:	6f 93       	push	r22
 11c:	7f 93       	push	r23
 11e:	8f 93       	push	r24
 120:	9f 93       	push	r25
 122:	af 93       	push	r26
 124:	bf 93       	push	r27
 126:	ef 93       	push	r30
 128:	ff 93       	push	r31
 12a:	e0 91 04 01 	lds	r30, 0x0104
 12e:	f0 91 05 01 	lds	r31, 0x0105
 132:	09 95       	icall
 134:	ff 91       	pop	r31
 136:	ef 91       	pop	r30
 138:	bf 91       	pop	r27
 13a:	af 91       	pop	r26
 13c:	9f 91       	pop	r25
 13e:	8f 91       	pop	r24
 140:	7f 91       	pop	r23
 142:	6f 91       	pop	r22
 144:	5f 91       	pop	r21
 146:	4f 91       	pop	r20
 148:	3f 91       	pop	r19
 14a:	2f 91       	pop	r18
 14c:	0f 90       	pop	r0
 14e:	0b be       	out	0x3b, r0	; 59
 150:	0f 90       	pop	r0
 152:	0f be       	out	0x3f, r0	; 63
 154:	0f 90       	pop	r0
 156:	1f 90       	pop	r1
 158:	18 95       	reti

0000015a <__vector_9>:
}

#ifdef ENABLE_TIMER2
ISR(TIMER2_COMPA_vect) {
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	0b b6       	in	r0, 0x3b	; 59
 166:	0f 92       	push	r0
 168:	2f 93       	push	r18
 16a:	3f 93       	push	r19
 16c:	4f 93       	push	r20
 16e:	5f 93       	push	r21
 170:	6f 93       	push	r22
 172:	7f 93       	push	r23
 174:	8f 93       	push	r24
 176:	9f 93       	push	r25
 178:	af 93       	push	r26
 17a:	bf 93       	push	r27
 17c:	ef 93       	push	r30
 17e:	ff 93       	push	r31
	_t2_func();
 180:	e0 91 02 01 	lds	r30, 0x0102
 184:	f0 91 03 01 	lds	r31, 0x0103
 188:	09 95       	icall
}
 18a:	ff 91       	pop	r31
 18c:	ef 91       	pop	r30
 18e:	bf 91       	pop	r27
 190:	af 91       	pop	r26
 192:	9f 91       	pop	r25
 194:	8f 91       	pop	r24
 196:	7f 91       	pop	r23
 198:	6f 91       	pop	r22
 19a:	5f 91       	pop	r21
 19c:	4f 91       	pop	r20
 19e:	3f 91       	pop	r19
 1a0:	2f 91       	pop	r18
 1a2:	0f 90       	pop	r0
 1a4:	0b be       	out	0x3b, r0	; 59
 1a6:	0f 90       	pop	r0
 1a8:	0f be       	out	0x3f, r0	; 63
 1aa:	0f 90       	pop	r0
 1ac:	1f 90       	pop	r1
 1ae:	18 95       	reti

000001b0 <main>:

volatile unsigned char data;

int main(void)
{	
	suart_init(1000000);
 1b0:	60 e4       	ldi	r22, 0x40	; 64
 1b2:	72 e4       	ldi	r23, 0x42	; 66
 1b4:	8f e0       	ldi	r24, 0x0F	; 15
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	10 d0       	rcall	.+32     	; 0x1da <suart_init>
	sei();
 1ba:	78 94       	sei
	
	//www.wormfood.net/avrbaudcalc.php
	//extremeelectronics.co.in/avr-tutorials/using-the-usart-of-avr-microcontrollers/
	//UBRR = 23, 0x0017
	
	DDRB = 0xFF;
 1bc:	8f ef       	ldi	r24, 0xFF	; 255
 1be:	84 b9       	out	0x04, r24	; 4
	//res = suart_command_write_data(12, 0x20, list1, 1);
	//res = suart_command_reset(0xFE);
	//suart_command_ping(1);
	//PORTB = res.error;
	//suart_send_string(list1, 1);
	SUART_RX_ACTIVE;
 1c0:	5d 98       	cbi	0x0b, 5	; 11
 1c2:	ff cf       	rjmp	.-2      	; 0x1c2 <main+0x12>

000001c4 <__vector_30>:
		
		
    }
}

ISR(USART1_TX_vect){
 1c4:	1f 92       	push	r1
 1c6:	0f 92       	push	r0
 1c8:	0f b6       	in	r0, 0x3f	; 63
 1ca:	0f 92       	push	r0
 1cc:	11 24       	eor	r1, r1
	SUART_RX_ACTIVE;
 1ce:	5d 98       	cbi	0x0b, 5	; 11
 1d0:	0f 90       	pop	r0
 1d2:	0f be       	out	0x3f, r0	; 63
 1d4:	0f 90       	pop	r0
 1d6:	1f 90       	pop	r1
 1d8:	18 95       	reti

000001da <suart_init>:
#include "servo_uart.h"

void suart_init(long baud)
{
 1da:	9b 01       	movw	r18, r22
 1dc:	ac 01       	movw	r20, r24
	DDRD = 0x20;
 1de:	80 e2       	ldi	r24, 0x20	; 32
 1e0:	8a b9       	out	0x0a, r24	; 10

	UBRR1H = ((F_CPU / 16 + baud / 2) / baud - 1) >> 8;
 1e2:	da 01       	movw	r26, r20
 1e4:	c9 01       	movw	r24, r18
 1e6:	55 23       	and	r21, r21
 1e8:	1c f4       	brge	.+6      	; 0x1f0 <suart_init+0x16>
 1ea:	01 96       	adiw	r24, 0x01	; 1
 1ec:	a1 1d       	adc	r26, r1
 1ee:	b1 1d       	adc	r27, r1
 1f0:	b5 95       	asr	r27
 1f2:	a7 95       	ror	r26
 1f4:	97 95       	ror	r25
 1f6:	87 95       	ror	r24
 1f8:	bc 01       	movw	r22, r24
 1fa:	cd 01       	movw	r24, r26
 1fc:	60 5c       	subi	r22, 0xC0	; 192
 1fe:	7d 4b       	sbci	r23, 0xBD	; 189
 200:	80 4f       	sbci	r24, 0xF0	; 240
 202:	9f 4f       	sbci	r25, 0xFF	; 255
 204:	17 d0       	rcall	.+46     	; 0x234 <__udivmodsi4>
 206:	da 01       	movw	r26, r20
 208:	c9 01       	movw	r24, r18
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	a1 09       	sbc	r26, r1
 20e:	b1 09       	sbc	r27, r1
 210:	89 2f       	mov	r24, r25
 212:	9a 2f       	mov	r25, r26
 214:	ab 2f       	mov	r26, r27
 216:	bb 27       	eor	r27, r27
 218:	80 93 cd 00 	sts	0x00CD, r24
	UBRR1L = ((F_CPU / 16 + baud / 2) / baud - 1);
 21c:	21 50       	subi	r18, 0x01	; 1
 21e:	20 93 cc 00 	sts	0x00CC, r18

	UCSR1C = (3 << UCSZ10);
 222:	86 e0       	ldi	r24, 0x06	; 6
 224:	80 93 ca 00 	sts	0x00CA, r24
	UCSR1B |= (1 << RXEN1) | (1 << TXEN1) | (1 << TXCIE1);
 228:	e9 ec       	ldi	r30, 0xC9	; 201
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	80 81       	ld	r24, Z
 22e:	88 65       	ori	r24, 0x58	; 88
 230:	80 83       	st	Z, r24
 232:	08 95       	ret

00000234 <__udivmodsi4>:
 234:	a1 e2       	ldi	r26, 0x21	; 33
 236:	1a 2e       	mov	r1, r26
 238:	aa 1b       	sub	r26, r26
 23a:	bb 1b       	sub	r27, r27
 23c:	fd 01       	movw	r30, r26
 23e:	0d c0       	rjmp	.+26     	; 0x25a <__udivmodsi4_ep>

00000240 <__udivmodsi4_loop>:
 240:	aa 1f       	adc	r26, r26
 242:	bb 1f       	adc	r27, r27
 244:	ee 1f       	adc	r30, r30
 246:	ff 1f       	adc	r31, r31
 248:	a2 17       	cp	r26, r18
 24a:	b3 07       	cpc	r27, r19
 24c:	e4 07       	cpc	r30, r20
 24e:	f5 07       	cpc	r31, r21
 250:	20 f0       	brcs	.+8      	; 0x25a <__udivmodsi4_ep>
 252:	a2 1b       	sub	r26, r18
 254:	b3 0b       	sbc	r27, r19
 256:	e4 0b       	sbc	r30, r20
 258:	f5 0b       	sbc	r31, r21

0000025a <__udivmodsi4_ep>:
 25a:	66 1f       	adc	r22, r22
 25c:	77 1f       	adc	r23, r23
 25e:	88 1f       	adc	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	1a 94       	dec	r1
 264:	69 f7       	brne	.-38     	; 0x240 <__udivmodsi4_loop>
 266:	60 95       	com	r22
 268:	70 95       	com	r23
 26a:	80 95       	com	r24
 26c:	90 95       	com	r25
 26e:	9b 01       	movw	r18, r22
 270:	ac 01       	movw	r20, r24
 272:	bd 01       	movw	r22, r26
 274:	cf 01       	movw	r24, r30
 276:	08 95       	ret

00000278 <_exit>:
 278:	f8 94       	cli

0000027a <__stop_program>:
 27a:	ff cf       	rjmp	.-2      	; 0x27a <__stop_program>
