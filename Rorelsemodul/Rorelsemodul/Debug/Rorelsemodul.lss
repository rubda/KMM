
Rorelsemodul.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000032e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000382  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000088  00000000  00000000  000003b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000644  00000000  00000000  0000043a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000002b0  00000000  00000000  00000a7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000003b2  00000000  00000000  00000d2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000194  00000000  00000000  000010e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000026a  00000000  00000000  00001274  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000006eb  00000000  00000000  000014de  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000068  00000000  00000000  00001bc9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	47 c1       	rjmp	.+654    	; 0x32a <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
 */ 

#include "servo_uart.h"

int main(void)
{	
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	00 d0       	rcall	.+0      	; 0xa4 <main+0x6>
  a4:	00 d0       	rcall	.+0      	; 0xa6 <main+0x8>
  a6:	1f 92       	push	r1
  a8:	cd b7       	in	r28, 0x3d	; 61
  aa:	de b7       	in	r29, 0x3e	; 62
	suart_init(1000000);
  ac:	60 e4       	ldi	r22, 0x40	; 64
  ae:	72 e4       	ldi	r23, 0x42	; 66
  b0:	8f e0       	ldi	r24, 0x0F	; 15
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	05 d0       	rcall	.+10     	; 0xc0 <suart_init>
	//UBRR = 23, 0x0017
	char send[20] = {0xFF, 0xFF, 0x01, 0x02, 0x01};
	//char recv[20];
	//int i = 0;
	
	DDRB = 0xFF;
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	84 b9       	out	0x04, r24	; 4
	
	int i = 0;
	while(1)
	{	
		//for(i = 0; i < 254; ++i){
		res = suart_command_ping(i);
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	f1 d0       	rcall	.+482    	; 0x2a0 <suart_command_ping>
  be:	fd cf       	rjmp	.-6      	; 0xba <main+0x1c>

000000c0 <suart_init>:
#include "servo_uart.h"

void suart_init(long baud)
{
  c0:	9b 01       	movw	r18, r22
  c2:	ac 01       	movw	r20, r24
	DDRD = 0x20;
  c4:	80 e2       	ldi	r24, 0x20	; 32
  c6:	8a b9       	out	0x0a, r24	; 10

	UBRR1H = ((F_CPU / 16 + baud / 2) / baud - 1) >> 8;
  c8:	da 01       	movw	r26, r20
  ca:	c9 01       	movw	r24, r18
  cc:	55 23       	and	r21, r21
  ce:	1c f4       	brge	.+6      	; 0xd6 <suart_init+0x16>
  d0:	01 96       	adiw	r24, 0x01	; 1
  d2:	a1 1d       	adc	r26, r1
  d4:	b1 1d       	adc	r27, r1
  d6:	b5 95       	asr	r27
  d8:	a7 95       	ror	r26
  da:	97 95       	ror	r25
  dc:	87 95       	ror	r24
  de:	bc 01       	movw	r22, r24
  e0:	cd 01       	movw	r24, r26
  e2:	78 5f       	subi	r23, 0xF8	; 248
  e4:	88 4f       	sbci	r24, 0xF8	; 248
  e6:	9f 4f       	sbci	r25, 0xFF	; 255
  e8:	fe d0       	rcall	.+508    	; 0x2e6 <__udivmodsi4>
  ea:	da 01       	movw	r26, r20
  ec:	c9 01       	movw	r24, r18
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	a1 09       	sbc	r26, r1
  f2:	b1 09       	sbc	r27, r1
  f4:	89 2f       	mov	r24, r25
  f6:	9a 2f       	mov	r25, r26
  f8:	ab 2f       	mov	r26, r27
  fa:	bb 27       	eor	r27, r27
  fc:	80 93 cd 00 	sts	0x00CD, r24
	UBRR1L = ((F_CPU / 16 + baud / 2) / baud - 1);
 100:	21 50       	subi	r18, 0x01	; 1
 102:	20 93 cc 00 	sts	0x00CC, r18

	
	UCSR1C = (3 << UCSZ10);
 106:	86 e0       	ldi	r24, 0x06	; 6
 108:	80 93 ca 00 	sts	0x00CA, r24
	UCSR1B |= ((1 << RXEN1) | (1 << TXEN1));
 10c:	e9 ec       	ldi	r30, 0xC9	; 201
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	88 61       	ori	r24, 0x18	; 24
 114:	80 83       	st	Z, r24
 116:	08 95       	ret

00000118 <suart_read_char>:
}

char suart_read_char()
{
	while(!(UCSR1A & (1 << RXC1)));
 118:	e8 ec       	ldi	r30, 0xC8	; 200
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	88 23       	and	r24, r24
 120:	ec f7       	brge	.-6      	; 0x11c <suart_read_char+0x4>
	
	return UDR1;
 122:	80 91 ce 00 	lds	r24, 0x00CE
}
 126:	08 95       	ret

00000128 <suart_send_char>:

void suart_send_char(uint8_t data)
{
	while(!(UCSR1A & (1 << UDRE1)));
 128:	e8 ec       	ldi	r30, 0xC8	; 200
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	90 81       	ld	r25, Z
 12e:	95 ff       	sbrs	r25, 5
 130:	fd cf       	rjmp	.-6      	; 0x12c <suart_send_char+0x4>
	
	UDR1 = data;
 132:	80 93 ce 00 	sts	0x00CE, r24
 136:	08 95       	ret

00000138 <suart_read_string>:
	
}

int suart_read_string(char *s, int size)
{
 138:	df 92       	push	r13
 13a:	ef 92       	push	r14
 13c:	ff 92       	push	r15
 13e:	0f 93       	push	r16
 140:	1f 93       	push	r17
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	8c 01       	movw	r16, r24
	uint8_t i = 0;
	SUART_RX_ACTIVE;
 148:	5d 98       	cbi	0x0b, 5	; 11
	char c;
	
	while(i < size - 1){
 14a:	7b 01       	movw	r14, r22
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	e8 1a       	sub	r14, r24
 150:	f1 08       	sbc	r15, r1
 152:	1e 14       	cp	r1, r14
 154:	1f 04       	cpc	r1, r15
 156:	8c f4       	brge	.+34     	; 0x17a <suart_read_string+0x42>
 158:	c0 e0       	ldi	r28, 0x00	; 0
 15a:	d0 e0       	ldi	r29, 0x00	; 0
	
}

int suart_read_string(char *s, int size)
{
	uint8_t i = 0;
 15c:	d1 2c       	mov	r13, r1
	SUART_RX_ACTIVE;
	char c;
	
	while(i < size - 1){
		c = suart_read_char();
 15e:	dc df       	rcall	.-72     	; 0x118 <suart_read_char>
		if(c == '\0')
 160:	88 23       	and	r24, r24
 162:	71 f0       	breq	.+28     	; 0x180 <suart_read_string+0x48>
			break;
		s[i] = c;
 164:	f8 01       	movw	r30, r16
 166:	ed 0d       	add	r30, r13
 168:	f1 1d       	adc	r31, r1
 16a:	80 83       	st	Z, r24
		i++;
 16c:	d3 94       	inc	r13
{
	uint8_t i = 0;
	SUART_RX_ACTIVE;
	char c;
	
	while(i < size - 1){
 16e:	cd 2d       	mov	r28, r13
 170:	d0 e0       	ldi	r29, 0x00	; 0
 172:	ce 15       	cp	r28, r14
 174:	df 05       	cpc	r29, r15
 176:	9c f3       	brlt	.-26     	; 0x15e <suart_read_string+0x26>
 178:	03 c0       	rjmp	.+6      	; 0x180 <suart_read_string+0x48>
 17a:	c0 e0       	ldi	r28, 0x00	; 0
 17c:	d0 e0       	ldi	r29, 0x00	; 0
	
}

int suart_read_string(char *s, int size)
{
	uint8_t i = 0;
 17e:	d1 2c       	mov	r13, r1
			break;
		s[i] = c;
		i++;
	}
	
	s[i] = 0;
 180:	f8 01       	movw	r30, r16
 182:	ed 0d       	add	r30, r13
 184:	f1 1d       	adc	r31, r1
 186:	10 82       	st	Z, r1
	
	return i + 1;
}
 188:	ce 01       	movw	r24, r28
 18a:	01 96       	adiw	r24, 0x01	; 1
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	1f 91       	pop	r17
 192:	0f 91       	pop	r16
 194:	ff 90       	pop	r15
 196:	ef 90       	pop	r14
 198:	df 90       	pop	r13
 19a:	08 95       	ret

0000019c <suart_send_string>:

void suart_send_string(char *s, uint8_t size)
{
 19c:	ff 92       	push	r15
 19e:	0f 93       	push	r16
 1a0:	1f 93       	push	r17
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
 1a6:	f6 2e       	mov	r15, r22
	uint8_t i = 0;
	SUART_TX_ACTIVE;
 1a8:	5d 9a       	sbi	0x0b, 5	; 11
	
	uint8_t checksum = 0;
	
	for(i = 0; i < size; ++i){
 1aa:	66 23       	and	r22, r22
 1ac:	79 f0       	breq	.+30     	; 0x1cc <suart_send_string+0x30>
 1ae:	c8 2f       	mov	r28, r24
 1b0:	d9 2f       	mov	r29, r25
 1b2:	10 e0       	ldi	r17, 0x00	; 0
void suart_send_string(char *s, uint8_t size)
{
	uint8_t i = 0;
	SUART_TX_ACTIVE;
	
	uint8_t checksum = 0;
 1b4:	00 e0       	ldi	r16, 0x00	; 0
 1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <suart_send_string+0x24>
	
	for(i = 0; i < size; ++i){
		if(i >= 2) checksum += s[i];
 1b8:	12 30       	cpi	r17, 0x02	; 2
 1ba:	10 f0       	brcs	.+4      	; 0x1c0 <suart_send_string+0x24>
 1bc:	88 81       	ld	r24, Y
 1be:	08 0f       	add	r16, r24
		suart_send_char(s[i]);
 1c0:	89 91       	ld	r24, Y+
 1c2:	b2 df       	rcall	.-156    	; 0x128 <suart_send_char>
	uint8_t i = 0;
	SUART_TX_ACTIVE;
	
	uint8_t checksum = 0;
	
	for(i = 0; i < size; ++i){
 1c4:	1f 5f       	subi	r17, 0xFF	; 255
 1c6:	1f 11       	cpse	r17, r15
 1c8:	f7 cf       	rjmp	.-18     	; 0x1b8 <suart_send_string+0x1c>
 1ca:	01 c0       	rjmp	.+2      	; 0x1ce <suart_send_string+0x32>
void suart_send_string(char *s, uint8_t size)
{
	uint8_t i = 0;
	SUART_TX_ACTIVE;
	
	uint8_t checksum = 0;
 1cc:	00 e0       	ldi	r16, 0x00	; 0
	
	for(i = 0; i < size; ++i){
		if(i >= 2) checksum += s[i];
		suart_send_char(s[i]);
	}
	suart_send_char(~checksum);
 1ce:	80 2f       	mov	r24, r16
 1d0:	80 95       	com	r24
 1d2:	aa df       	rcall	.-172    	; 0x128 <suart_send_char>
	while(!(UCSR1A & (1 << TXC1)));
 1d4:	e8 ec       	ldi	r30, 0xC8	; 200
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	80 81       	ld	r24, Z
 1da:	86 ff       	sbrs	r24, 6
 1dc:	fd cf       	rjmp	.-6      	; 0x1d8 <suart_send_string+0x3c>
}
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	1f 91       	pop	r17
 1e4:	0f 91       	pop	r16
 1e6:	ff 90       	pop	r15
 1e8:	08 95       	ret

000001ea <suart_command>:

servo_response suart_command(uint8_t id, char* command, uint8_t size){
 1ea:	df 92       	push	r13
 1ec:	ef 92       	push	r14
 1ee:	ff 92       	push	r15
 1f0:	0f 93       	push	r16
 1f2:	1f 93       	push	r17
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	cd b7       	in	r28, 0x3d	; 61
 1fa:	de b7       	in	r29, 0x3e	; 62
 1fc:	65 97       	sbiw	r28, 0x15	; 21
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	f8 94       	cli
 202:	de bf       	out	0x3e, r29	; 62
 204:	0f be       	out	0x3f, r0	; 63
 206:	cd bf       	out	0x3d, r28	; 61
 208:	d8 2e       	mov	r13, r24
 20a:	cb 01       	movw	r24, r22
		parameter_list[i] = buffer[5+i];
	}
	response.parameters = parameter_list;
	
	return response;
}
 20c:	ed b6       	in	r14, 0x3d	; 61
 20e:	fe b6       	in	r15, 0x3e	; 62
}

servo_response suart_command(uint8_t id, char* command, uint8_t size){
	servo_response response;
	
	suart_send_string(command, size);
 210:	64 2f       	mov	r22, r20
 212:	c4 df       	rcall	.-120    	; 0x19c <suart_send_string>
	char buffer[16];
	uint8_t bytes_read = suart_read_string(buffer, 16);
 214:	60 e1       	ldi	r22, 0x10	; 16
 216:	70 e0       	ldi	r23, 0x00	; 0
 218:	ce 01       	movw	r24, r28
 21a:	06 96       	adiw	r24, 0x06	; 6
 21c:	8d df       	rcall	.-230    	; 0x138 <suart_read_string>
	
	if(bytes_read > 5){
 21e:	86 30       	cpi	r24, 0x06	; 6
 220:	10 f0       	brcs	.+4      	; 0x226 <suart_command+0x3c>
		PORTB = 0x99;
 222:	89 e9       	ldi	r24, 0x99	; 153
 224:	85 b9       	out	0x05, r24	; 5
	}
	
	response.id = id;
	response.error = buffer[4];
 226:	3a 85       	ldd	r19, Y+10	; 0x0a
	response.parameter_size = buffer[3]-2;
 228:	49 85       	ldd	r20, Y+9	; 0x09
 22a:	42 50       	subi	r20, 0x02	; 2
	
	uint8_t parameter_list[response.parameter_size];
 22c:	64 2f       	mov	r22, r20
 22e:	70 e0       	ldi	r23, 0x00	; 0
 230:	8d b7       	in	r24, 0x3d	; 61
 232:	9e b7       	in	r25, 0x3e	; 62
 234:	86 1b       	sub	r24, r22
 236:	97 0b       	sbc	r25, r23
 238:	0f b6       	in	r0, 0x3f	; 63
 23a:	f8 94       	cli
 23c:	9e bf       	out	0x3e, r25	; 62
 23e:	0f be       	out	0x3f, r0	; 63
 240:	8d bf       	out	0x3d, r24	; 61
 242:	0d b7       	in	r16, 0x3d	; 61
 244:	1e b7       	in	r17, 0x3e	; 62
 246:	0f 5f       	subi	r16, 0xFF	; 255
 248:	1f 4f       	sbci	r17, 0xFF	; 255
	int i;
	for(i = 0; i < response.parameter_size; ++i){
 24a:	16 16       	cp	r1, r22
 24c:	17 06       	cpc	r1, r23
 24e:	54 f4       	brge	.+20     	; 0x264 <suart_command+0x7a>
 250:	fe 01       	movw	r30, r28
 252:	3b 96       	adiw	r30, 0x0b	; 11
 254:	d8 01       	movw	r26, r16
 256:	6e 0f       	add	r22, r30
 258:	7f 1f       	adc	r23, r31
		parameter_list[i] = buffer[5+i];
 25a:	91 91       	ld	r25, Z+
 25c:	9d 93       	st	X+, r25
	response.error = buffer[4];
	response.parameter_size = buffer[3]-2;
	
	uint8_t parameter_list[response.parameter_size];
	int i;
	for(i = 0; i < response.parameter_size; ++i){
 25e:	e6 17       	cp	r30, r22
 260:	f7 07       	cpc	r31, r23
 262:	d9 f7       	brne	.-10     	; 0x25a <suart_command+0x70>
		parameter_list[i] = buffer[5+i];
	}
	response.parameters = parameter_list;
	
	return response;
 264:	d9 82       	std	Y+1, r13	; 0x01
 266:	3a 83       	std	Y+2, r19	; 0x02
 268:	4b 83       	std	Y+3, r20	; 0x03
 26a:	1d 83       	std	Y+5, r17	; 0x05
 26c:	0c 83       	std	Y+4, r16	; 0x04
 26e:	50 2f       	mov	r21, r16
 270:	6d 81       	ldd	r22, Y+5	; 0x05
}
 272:	2d 2d       	mov	r18, r13
 274:	70 e0       	ldi	r23, 0x00	; 0
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	0f b6       	in	r0, 0x3f	; 63
 27c:	f8 94       	cli
 27e:	fe be       	out	0x3e, r15	; 62
 280:	0f be       	out	0x3f, r0	; 63
 282:	ed be       	out	0x3d, r14	; 61
 284:	65 96       	adiw	r28, 0x15	; 21
 286:	0f b6       	in	r0, 0x3f	; 63
 288:	f8 94       	cli
 28a:	de bf       	out	0x3e, r29	; 62
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	cd bf       	out	0x3d, r28	; 61
 290:	df 91       	pop	r29
 292:	cf 91       	pop	r28
 294:	1f 91       	pop	r17
 296:	0f 91       	pop	r16
 298:	ff 90       	pop	r15
 29a:	ef 90       	pop	r14
 29c:	df 90       	pop	r13
 29e:	08 95       	ret

000002a0 <suart_command_ping>:

servo_response suart_command_ping(uint8_t id){
 2a0:	cf 93       	push	r28
 2a2:	df 93       	push	r29
 2a4:	cd b7       	in	r28, 0x3d	; 61
 2a6:	de b7       	in	r29, 0x3e	; 62
 2a8:	2a 97       	sbiw	r28, 0x0a	; 10
 2aa:	0f b6       	in	r0, 0x3f	; 63
 2ac:	f8 94       	cli
 2ae:	de bf       	out	0x3e, r29	; 62
 2b0:	0f be       	out	0x3f, r0	; 63
 2b2:	cd bf       	out	0x3d, r28	; 61
	char command[] = {0xFF, 0xFF, id, 0x02, 0x01};
 2b4:	9f ef       	ldi	r25, 0xFF	; 255
 2b6:	9e 83       	std	Y+6, r25	; 0x06
 2b8:	9f 83       	std	Y+7, r25	; 0x07
 2ba:	88 87       	std	Y+8, r24	; 0x08
 2bc:	92 e0       	ldi	r25, 0x02	; 2
 2be:	99 87       	std	Y+9, r25	; 0x09
 2c0:	91 e0       	ldi	r25, 0x01	; 1
 2c2:	9a 87       	std	Y+10, r25	; 0x0a
	return suart_command(id, command, 5);
 2c4:	45 e0       	ldi	r20, 0x05	; 5
 2c6:	be 01       	movw	r22, r28
 2c8:	6a 5f       	subi	r22, 0xFA	; 250
 2ca:	7f 4f       	sbci	r23, 0xFF	; 255
 2cc:	8e df       	rcall	.-228    	; 0x1ea <suart_command>
}
 2ce:	70 e0       	ldi	r23, 0x00	; 0
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	2a 96       	adiw	r28, 0x0a	; 10
 2d6:	0f b6       	in	r0, 0x3f	; 63
 2d8:	f8 94       	cli
 2da:	de bf       	out	0x3e, r29	; 62
 2dc:	0f be       	out	0x3f, r0	; 63
 2de:	cd bf       	out	0x3d, r28	; 61
 2e0:	df 91       	pop	r29
 2e2:	cf 91       	pop	r28
 2e4:	08 95       	ret

000002e6 <__udivmodsi4>:
 2e6:	a1 e2       	ldi	r26, 0x21	; 33
 2e8:	1a 2e       	mov	r1, r26
 2ea:	aa 1b       	sub	r26, r26
 2ec:	bb 1b       	sub	r27, r27
 2ee:	fd 01       	movw	r30, r26
 2f0:	0d c0       	rjmp	.+26     	; 0x30c <__udivmodsi4_ep>

000002f2 <__udivmodsi4_loop>:
 2f2:	aa 1f       	adc	r26, r26
 2f4:	bb 1f       	adc	r27, r27
 2f6:	ee 1f       	adc	r30, r30
 2f8:	ff 1f       	adc	r31, r31
 2fa:	a2 17       	cp	r26, r18
 2fc:	b3 07       	cpc	r27, r19
 2fe:	e4 07       	cpc	r30, r20
 300:	f5 07       	cpc	r31, r21
 302:	20 f0       	brcs	.+8      	; 0x30c <__udivmodsi4_ep>
 304:	a2 1b       	sub	r26, r18
 306:	b3 0b       	sbc	r27, r19
 308:	e4 0b       	sbc	r30, r20
 30a:	f5 0b       	sbc	r31, r21

0000030c <__udivmodsi4_ep>:
 30c:	66 1f       	adc	r22, r22
 30e:	77 1f       	adc	r23, r23
 310:	88 1f       	adc	r24, r24
 312:	99 1f       	adc	r25, r25
 314:	1a 94       	dec	r1
 316:	69 f7       	brne	.-38     	; 0x2f2 <__udivmodsi4_loop>
 318:	60 95       	com	r22
 31a:	70 95       	com	r23
 31c:	80 95       	com	r24
 31e:	90 95       	com	r25
 320:	9b 01       	movw	r18, r22
 322:	ac 01       	movw	r20, r24
 324:	bd 01       	movw	r22, r26
 326:	cf 01       	movw	r24, r30
 328:	08 95       	ret

0000032a <_exit>:
 32a:	f8 94       	cli

0000032c <__stop_program>:
 32c:	ff cf       	rjmp	.-2      	; 0x32c <__stop_program>
