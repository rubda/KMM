
Rorelsemodul.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000002c2  00000336  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000070  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000004d0  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000002a5  00000000  00000000  000008ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000347  00000000  00000000  00000b51  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000134  00000000  00000000  00000e98  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000247  00000000  00000000  00000fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000517  00000000  00000000  00001213  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000050  00000000  00000000  0000172a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ec       	ldi	r30, 0xC2	; 194
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	02 d0       	rcall	.+4      	; 0xb8 <main>
  b4:	04 c1       	rjmp	.+520    	; 0x2be <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <main>:

#include <avr/io.h>
#include "servo_uart.h"

int main(void)
{	
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	00 d0       	rcall	.+0      	; 0xbe <main+0x6>
  be:	00 d0       	rcall	.+0      	; 0xc0 <main+0x8>
  c0:	1f 92       	push	r1
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
	suart_init();
  c6:	06 d0       	rcall	.+12     	; 0xd4 <suart_init>
	//UBRR = 23, 0x0017
	char send[20] = {0xFF, 0xFF, 0x01, 0x02, 0x01};
	//char recv[20];
	//int i = 0;
	
	DDRB = 0xFF;
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	84 b9       	out	0x04, r24	; 4
	//if(res == (servo_response)SERVO_ERROR);
	
	
	while(1)
	{
		res = suart_command_ping(1);
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	d3 d0       	rcall	.+422    	; 0x276 <suart_command_ping>
		PORTB = res.error;
  d0:	35 b9       	out	0x05, r19	; 5
  d2:	fc cf       	rjmp	.-8      	; 0xcc <main+0x14>

000000d4 <suart_init>:
#include "servo_uart.h"

void suart_init()
{
	DDRD |= (1 << SUART_MODE);
  d4:	54 9a       	sbi	0x0a, 4	; 10
	UBRR1 = UART_SETTINGS;
  d6:	87 e1       	ldi	r24, 0x17	; 23
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	90 93 cd 00 	sts	0x00CD, r25
  de:	80 93 cc 00 	sts	0x00CC, r24
	
	UCSR1C = (3 << UCSZ10);
  e2:	86 e0       	ldi	r24, 0x06	; 6
  e4:	80 93 ca 00 	sts	0x00CA, r24
	UCSR1B |= ((1 << RXEN1) | (1 << TXEN1));
  e8:	e9 ec       	ldi	r30, 0xC9	; 201
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	88 61       	ori	r24, 0x18	; 24
  f0:	80 83       	st	Z, r24
  f2:	08 95       	ret

000000f4 <suart_read_char>:
}

char suart_read_char()
{
	SUART_RX_ACTIVE;
  f4:	5c 9a       	sbi	0x0b, 4	; 11
	while(!(UCSR1A & (1 << RXC1)));
  f6:	e8 ec       	ldi	r30, 0xC8	; 200
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	88 23       	and	r24, r24
  fe:	ec f7       	brge	.-6      	; 0xfa <suart_read_char+0x6>
	
	return UDR1;
 100:	80 91 ce 00 	lds	r24, 0x00CE
}
 104:	08 95       	ret

00000106 <suart_send_char>:

void suart_send_char(uint8_t data)
{
	SUART_TX_ACTIVE;
 106:	5c 98       	cbi	0x0b, 4	; 11
	while(!(UCSR1A & (1 << UDRE1)));
 108:	e8 ec       	ldi	r30, 0xC8	; 200
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	90 81       	ld	r25, Z
 10e:	95 ff       	sbrs	r25, 5
 110:	fd cf       	rjmp	.-6      	; 0x10c <suart_send_char+0x6>
	
	UDR1 = data;
 112:	80 93 ce 00 	sts	0x00CE, r24
 116:	08 95       	ret

00000118 <suart_read_string>:
}

int suart_read_string(char *s, int size)
{
 118:	df 92       	push	r13
 11a:	ef 92       	push	r14
 11c:	ff 92       	push	r15
 11e:	0f 93       	push	r16
 120:	1f 93       	push	r17
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
 126:	8c 01       	movw	r16, r24
	uint8_t i = 0;
	SUART_RX_ACTIVE;
 128:	5c 9a       	sbi	0x0b, 4	; 11
	char c;
	
	while(i < size - 1){
 12a:	7b 01       	movw	r14, r22
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	e8 1a       	sub	r14, r24
 130:	f1 08       	sbc	r15, r1
 132:	1e 14       	cp	r1, r14
 134:	1f 04       	cpc	r1, r15
 136:	8c f4       	brge	.+34     	; 0x15a <suart_read_string+0x42>
 138:	c0 e0       	ldi	r28, 0x00	; 0
 13a:	d0 e0       	ldi	r29, 0x00	; 0
	UDR1 = data;
}

int suart_read_string(char *s, int size)
{
	uint8_t i = 0;
 13c:	d1 2c       	mov	r13, r1
	SUART_RX_ACTIVE;
	char c;
	
	while(i < size - 1){
		c = suart_read_char();
 13e:	da df       	rcall	.-76     	; 0xf4 <suart_read_char>
		if(c == '\0')
 140:	88 23       	and	r24, r24
 142:	71 f0       	breq	.+28     	; 0x160 <suart_read_string+0x48>
			break;
		s[i] = c;
 144:	f8 01       	movw	r30, r16
 146:	ed 0d       	add	r30, r13
 148:	f1 1d       	adc	r31, r1
 14a:	80 83       	st	Z, r24
		i++;
 14c:	d3 94       	inc	r13
{
	uint8_t i = 0;
	SUART_RX_ACTIVE;
	char c;
	
	while(i < size - 1){
 14e:	cd 2d       	mov	r28, r13
 150:	d0 e0       	ldi	r29, 0x00	; 0
 152:	ce 15       	cp	r28, r14
 154:	df 05       	cpc	r29, r15
 156:	9c f3       	brlt	.-26     	; 0x13e <suart_read_string+0x26>
 158:	03 c0       	rjmp	.+6      	; 0x160 <suart_read_string+0x48>
 15a:	c0 e0       	ldi	r28, 0x00	; 0
 15c:	d0 e0       	ldi	r29, 0x00	; 0
	UDR1 = data;
}

int suart_read_string(char *s, int size)
{
	uint8_t i = 0;
 15e:	d1 2c       	mov	r13, r1
			break;
		s[i] = c;
		i++;
	}
	
	s[i] = 0;
 160:	f8 01       	movw	r30, r16
 162:	ed 0d       	add	r30, r13
 164:	f1 1d       	adc	r31, r1
 166:	10 82       	st	Z, r1
	
	return i + 1;
}
 168:	ce 01       	movw	r24, r28
 16a:	01 96       	adiw	r24, 0x01	; 1
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	1f 91       	pop	r17
 172:	0f 91       	pop	r16
 174:	ff 90       	pop	r15
 176:	ef 90       	pop	r14
 178:	df 90       	pop	r13
 17a:	08 95       	ret

0000017c <suart_send_string>:

void suart_send_string(char *s, uint8_t size)
{
 17c:	ff 92       	push	r15
 17e:	0f 93       	push	r16
 180:	1f 93       	push	r17
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	f6 2e       	mov	r15, r22
	uint8_t i = 0;
	SUART_TX_ACTIVE;
 188:	5c 98       	cbi	0x0b, 4	; 11
	
	uint8_t checksum = 0;
	
	for(i = 0; i < size; ++i){
 18a:	66 23       	and	r22, r22
 18c:	79 f0       	breq	.+30     	; 0x1ac <suart_send_string+0x30>
 18e:	c8 2f       	mov	r28, r24
 190:	d9 2f       	mov	r29, r25
 192:	10 e0       	ldi	r17, 0x00	; 0
void suart_send_string(char *s, uint8_t size)
{
	uint8_t i = 0;
	SUART_TX_ACTIVE;
	
	uint8_t checksum = 0;
 194:	00 e0       	ldi	r16, 0x00	; 0
 196:	04 c0       	rjmp	.+8      	; 0x1a0 <suart_send_string+0x24>
	
	for(i = 0; i < size; ++i){
		if(i >= 2) checksum += s[i];
 198:	12 30       	cpi	r17, 0x02	; 2
 19a:	10 f0       	brcs	.+4      	; 0x1a0 <suart_send_string+0x24>
 19c:	88 81       	ld	r24, Y
 19e:	08 0f       	add	r16, r24
		suart_send_char(s[i]);
 1a0:	89 91       	ld	r24, Y+
 1a2:	b1 df       	rcall	.-158    	; 0x106 <suart_send_char>
	uint8_t i = 0;
	SUART_TX_ACTIVE;
	
	uint8_t checksum = 0;
	
	for(i = 0; i < size; ++i){
 1a4:	1f 5f       	subi	r17, 0xFF	; 255
 1a6:	1f 11       	cpse	r17, r15
 1a8:	f7 cf       	rjmp	.-18     	; 0x198 <suart_send_string+0x1c>
 1aa:	01 c0       	rjmp	.+2      	; 0x1ae <suart_send_string+0x32>
void suart_send_string(char *s, uint8_t size)
{
	uint8_t i = 0;
	SUART_TX_ACTIVE;
	
	uint8_t checksum = 0;
 1ac:	00 e0       	ldi	r16, 0x00	; 0
	
	for(i = 0; i < size; ++i){
		if(i >= 2) checksum += s[i];
		suart_send_char(s[i]);
	}
	suart_send_char(~checksum);
 1ae:	80 2f       	mov	r24, r16
 1b0:	80 95       	com	r24
 1b2:	a9 df       	rcall	.-174    	; 0x106 <suart_send_char>
}
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	1f 91       	pop	r17
 1ba:	0f 91       	pop	r16
 1bc:	ff 90       	pop	r15
 1be:	08 95       	ret

000001c0 <suart_command>:

servo_response suart_command(uint8_t id, char* command, uint8_t size){
 1c0:	df 92       	push	r13
 1c2:	ef 92       	push	r14
 1c4:	ff 92       	push	r15
 1c6:	0f 93       	push	r16
 1c8:	1f 93       	push	r17
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	cd b7       	in	r28, 0x3d	; 61
 1d0:	de b7       	in	r29, 0x3e	; 62
 1d2:	65 97       	sbiw	r28, 0x15	; 21
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	f8 94       	cli
 1d8:	de bf       	out	0x3e, r29	; 62
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	cd bf       	out	0x3d, r28	; 61
 1de:	d8 2e       	mov	r13, r24
 1e0:	cb 01       	movw	r24, r22
		parameter_list[i] = buffer[5+i];
	}
	response.parameters = parameter_list;
	
	return response;
}
 1e2:	ed b6       	in	r14, 0x3d	; 61
 1e4:	fe b6       	in	r15, 0x3e	; 62
}

servo_response suart_command(uint8_t id, char* command, uint8_t size){
	servo_response response;
	
	suart_send_string(command, size);
 1e6:	64 2f       	mov	r22, r20
 1e8:	c9 df       	rcall	.-110    	; 0x17c <suart_send_string>
	char buffer[16];
	uint8_t bytes_read = suart_read_string(buffer, 16);
 1ea:	60 e1       	ldi	r22, 0x10	; 16
 1ec:	70 e0       	ldi	r23, 0x00	; 0
 1ee:	ce 01       	movw	r24, r28
 1f0:	06 96       	adiw	r24, 0x06	; 6
 1f2:	92 df       	rcall	.-220    	; 0x118 <suart_read_string>
	
	if(bytes_read > 5){
 1f4:	86 30       	cpi	r24, 0x06	; 6
 1f6:	10 f0       	brcs	.+4      	; 0x1fc <suart_command+0x3c>
		PORTB = 0x99;
 1f8:	89 e9       	ldi	r24, 0x99	; 153
 1fa:	85 b9       	out	0x05, r24	; 5
	}
	
	response.id = id;
	response.error = buffer[4];
 1fc:	3a 85       	ldd	r19, Y+10	; 0x0a
	response.parameter_size = buffer[3]-2;
 1fe:	49 85       	ldd	r20, Y+9	; 0x09
 200:	42 50       	subi	r20, 0x02	; 2
	
	uint8_t parameter_list[response.parameter_size];
 202:	64 2f       	mov	r22, r20
 204:	70 e0       	ldi	r23, 0x00	; 0
 206:	8d b7       	in	r24, 0x3d	; 61
 208:	9e b7       	in	r25, 0x3e	; 62
 20a:	86 1b       	sub	r24, r22
 20c:	97 0b       	sbc	r25, r23
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	f8 94       	cli
 212:	9e bf       	out	0x3e, r25	; 62
 214:	0f be       	out	0x3f, r0	; 63
 216:	8d bf       	out	0x3d, r24	; 61
 218:	0d b7       	in	r16, 0x3d	; 61
 21a:	1e b7       	in	r17, 0x3e	; 62
 21c:	0f 5f       	subi	r16, 0xFF	; 255
 21e:	1f 4f       	sbci	r17, 0xFF	; 255
	int i;
	for(i = 0; i < response.parameter_size; ++i){
 220:	16 16       	cp	r1, r22
 222:	17 06       	cpc	r1, r23
 224:	54 f4       	brge	.+20     	; 0x23a <suart_command+0x7a>
 226:	fe 01       	movw	r30, r28
 228:	3b 96       	adiw	r30, 0x0b	; 11
 22a:	d8 01       	movw	r26, r16
 22c:	6e 0f       	add	r22, r30
 22e:	7f 1f       	adc	r23, r31
		parameter_list[i] = buffer[5+i];
 230:	91 91       	ld	r25, Z+
 232:	9d 93       	st	X+, r25
	response.error = buffer[4];
	response.parameter_size = buffer[3]-2;
	
	uint8_t parameter_list[response.parameter_size];
	int i;
	for(i = 0; i < response.parameter_size; ++i){
 234:	e6 17       	cp	r30, r22
 236:	f7 07       	cpc	r31, r23
 238:	d9 f7       	brne	.-10     	; 0x230 <suart_command+0x70>
		parameter_list[i] = buffer[5+i];
	}
	response.parameters = parameter_list;
	
	return response;
 23a:	d9 82       	std	Y+1, r13	; 0x01
 23c:	3a 83       	std	Y+2, r19	; 0x02
 23e:	4b 83       	std	Y+3, r20	; 0x03
 240:	1d 83       	std	Y+5, r17	; 0x05
 242:	0c 83       	std	Y+4, r16	; 0x04
 244:	50 2f       	mov	r21, r16
 246:	6d 81       	ldd	r22, Y+5	; 0x05
}
 248:	2d 2d       	mov	r18, r13
 24a:	70 e0       	ldi	r23, 0x00	; 0
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	0f b6       	in	r0, 0x3f	; 63
 252:	f8 94       	cli
 254:	fe be       	out	0x3e, r15	; 62
 256:	0f be       	out	0x3f, r0	; 63
 258:	ed be       	out	0x3d, r14	; 61
 25a:	65 96       	adiw	r28, 0x15	; 21
 25c:	0f b6       	in	r0, 0x3f	; 63
 25e:	f8 94       	cli
 260:	de bf       	out	0x3e, r29	; 62
 262:	0f be       	out	0x3f, r0	; 63
 264:	cd bf       	out	0x3d, r28	; 61
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	1f 91       	pop	r17
 26c:	0f 91       	pop	r16
 26e:	ff 90       	pop	r15
 270:	ef 90       	pop	r14
 272:	df 90       	pop	r13
 274:	08 95       	ret

00000276 <suart_command_ping>:

servo_response suart_command_ping(uint8_t id){
 276:	cf 93       	push	r28
 278:	df 93       	push	r29
 27a:	cd b7       	in	r28, 0x3d	; 61
 27c:	de b7       	in	r29, 0x3e	; 62
 27e:	2a 97       	sbiw	r28, 0x0a	; 10
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	f8 94       	cli
 284:	de bf       	out	0x3e, r29	; 62
 286:	0f be       	out	0x3f, r0	; 63
 288:	cd bf       	out	0x3d, r28	; 61
	char command[] = {0xFF, 0xFF, 0x01, 0x02, 0x01};
 28a:	95 e0       	ldi	r25, 0x05	; 5
 28c:	e0 e0       	ldi	r30, 0x00	; 0
 28e:	f1 e0       	ldi	r31, 0x01	; 1
 290:	de 01       	movw	r26, r28
 292:	16 96       	adiw	r26, 0x06	; 6
 294:	01 90       	ld	r0, Z+
 296:	0d 92       	st	X+, r0
 298:	9a 95       	dec	r25
 29a:	e1 f7       	brne	.-8      	; 0x294 <suart_command_ping+0x1e>
	return suart_command(id, command, sizeof(command)/sizeof(command[0]));
 29c:	45 e0       	ldi	r20, 0x05	; 5
 29e:	be 01       	movw	r22, r28
 2a0:	6a 5f       	subi	r22, 0xFA	; 250
 2a2:	7f 4f       	sbci	r23, 0xFF	; 255
 2a4:	8d df       	rcall	.-230    	; 0x1c0 <suart_command>
 2a6:	70 e0       	ldi	r23, 0x00	; 0
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	2a 96       	adiw	r28, 0x0a	; 10
 2ae:	0f b6       	in	r0, 0x3f	; 63
 2b0:	f8 94       	cli
 2b2:	de bf       	out	0x3e, r29	; 62
 2b4:	0f be       	out	0x3f, r0	; 63
 2b6:	cd bf       	out	0x3d, r28	; 61
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	08 95       	ret

000002be <_exit>:
 2be:	f8 94       	cli

000002c0 <__stop_program>:
 2c0:	ff cf       	rjmp	.-2      	; 0x2c0 <__stop_program>
