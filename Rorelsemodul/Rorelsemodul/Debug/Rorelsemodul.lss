
Rorelsemodul.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000002d0  00000344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000034a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000070  00000000  00000000  0000037a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000501  00000000  00000000  000003ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000028e  00000000  00000000  000008eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000354  00000000  00000000  00000b79  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000134  00000000  00000000  00000ed0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000021b  00000000  00000000  00001004  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000517  00000000  00000000  0000121f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000050  00000000  00000000  00001736  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ed       	ldi	r30, 0xD0	; 208
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	02 d0       	rcall	.+4      	; 0xb8 <main>
  b4:	0b c1       	rjmp	.+534    	; 0x2cc <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <main>:
 */ 

#include "servo_uart.h"

int main(void)
{	
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	00 d0       	rcall	.+0      	; 0xbe <main+0x6>
  be:	00 d0       	rcall	.+0      	; 0xc0 <main+0x8>
  c0:	1f 92       	push	r1
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
	suart_init(1000000);
  c6:	60 e4       	ldi	r22, 0x40	; 64
  c8:	72 e4       	ldi	r23, 0x42	; 66
  ca:	8f e0       	ldi	r24, 0x0F	; 15
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	06 d0       	rcall	.+12     	; 0xdc <suart_init>
	//UBRR = 23, 0x0017
	char send[20] = {0xFF, 0xFF, 0x01, 0x02, 0x01};
	//char recv[20];
	//int i = 0;
	
	DDRB = 0xFF;
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	84 b9       	out	0x04, r24	; 4
	//if(res == (servo_response)SERVO_ERROR);
	
	
	while(1)
	{	
		res = suart_command_ping(1);
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	d6 d0       	rcall	.+428    	; 0x284 <suart_command_ping>
		PORTB = res.error;
  d8:	35 b9       	out	0x05, r19	; 5
  da:	fc cf       	rjmp	.-8      	; 0xd4 <main+0x1c>

000000dc <suart_init>:
#include "servo_uart.h"

void suart_init(long baud)
{
	DDRD = 0x20;
  dc:	80 e2       	ldi	r24, 0x20	; 32
  de:	8a b9       	out	0x0a, r24	; 10

	//UBRR1H = ((F_CPU / 16 + baud / 2) / baud - 1) >> 8;
	//UBRR1L = ((F_CPU / 16 + baud / 2) / baud - 1);
	UBRR1H = 1 >> 8;
  e0:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = 1;
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	80 93 cc 00 	sts	0x00CC, r24

	
	UCSR1C = (3 << UCSZ10);
  ea:	86 e0       	ldi	r24, 0x06	; 6
  ec:	80 93 ca 00 	sts	0x00CA, r24
	UCSR1B |= ((1 << RXEN1) | (1 << TXEN1));
  f0:	e9 ec       	ldi	r30, 0xC9	; 201
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	88 61       	ori	r24, 0x18	; 24
  f8:	80 83       	st	Z, r24
  fa:	08 95       	ret

000000fc <suart_read_char>:
}

char suart_read_char()
{
	while(!(UCSR1A & (1 << RXC1)));
  fc:	e8 ec       	ldi	r30, 0xC8	; 200
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	88 23       	and	r24, r24
 104:	ec f7       	brge	.-6      	; 0x100 <suart_read_char+0x4>
	
	return UDR1;
 106:	80 91 ce 00 	lds	r24, 0x00CE
}
 10a:	08 95       	ret

0000010c <suart_send_char>:

void suart_send_char(uint8_t data)
{
	while(!(UCSR1A & (1 << UDRE1)));
 10c:	e8 ec       	ldi	r30, 0xC8	; 200
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	90 81       	ld	r25, Z
 112:	95 ff       	sbrs	r25, 5
 114:	fd cf       	rjmp	.-6      	; 0x110 <suart_send_char+0x4>
	
	UDR1 = data;
 116:	80 93 ce 00 	sts	0x00CE, r24
 11a:	08 95       	ret

0000011c <suart_read_string>:
	
}

int suart_read_string(char *s, int size)
{
 11c:	df 92       	push	r13
 11e:	ef 92       	push	r14
 120:	ff 92       	push	r15
 122:	0f 93       	push	r16
 124:	1f 93       	push	r17
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	8c 01       	movw	r16, r24
	uint8_t i = 0;
	SUART_RX_ACTIVE;
 12c:	5d 98       	cbi	0x0b, 5	; 11
	char c;
	
	while(i < size - 1){
 12e:	7b 01       	movw	r14, r22
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	e8 1a       	sub	r14, r24
 134:	f1 08       	sbc	r15, r1
 136:	1e 14       	cp	r1, r14
 138:	1f 04       	cpc	r1, r15
 13a:	8c f4       	brge	.+34     	; 0x15e <suart_read_string+0x42>
 13c:	c0 e0       	ldi	r28, 0x00	; 0
 13e:	d0 e0       	ldi	r29, 0x00	; 0
	
}

int suart_read_string(char *s, int size)
{
	uint8_t i = 0;
 140:	d1 2c       	mov	r13, r1
	SUART_RX_ACTIVE;
	char c;
	
	while(i < size - 1){
		c = suart_read_char();
 142:	dc df       	rcall	.-72     	; 0xfc <suart_read_char>
		if(c == '\0')
 144:	88 23       	and	r24, r24
 146:	71 f0       	breq	.+28     	; 0x164 <suart_read_string+0x48>
			break;
		s[i] = c;
 148:	f8 01       	movw	r30, r16
 14a:	ed 0d       	add	r30, r13
 14c:	f1 1d       	adc	r31, r1
 14e:	80 83       	st	Z, r24
		i++;
 150:	d3 94       	inc	r13
{
	uint8_t i = 0;
	SUART_RX_ACTIVE;
	char c;
	
	while(i < size - 1){
 152:	cd 2d       	mov	r28, r13
 154:	d0 e0       	ldi	r29, 0x00	; 0
 156:	ce 15       	cp	r28, r14
 158:	df 05       	cpc	r29, r15
 15a:	9c f3       	brlt	.-26     	; 0x142 <suart_read_string+0x26>
 15c:	03 c0       	rjmp	.+6      	; 0x164 <suart_read_string+0x48>
 15e:	c0 e0       	ldi	r28, 0x00	; 0
 160:	d0 e0       	ldi	r29, 0x00	; 0
	
}

int suart_read_string(char *s, int size)
{
	uint8_t i = 0;
 162:	d1 2c       	mov	r13, r1
			break;
		s[i] = c;
		i++;
	}
	
	s[i] = 0;
 164:	f8 01       	movw	r30, r16
 166:	ed 0d       	add	r30, r13
 168:	f1 1d       	adc	r31, r1
 16a:	10 82       	st	Z, r1
	
	return i + 1;
}
 16c:	ce 01       	movw	r24, r28
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	1f 91       	pop	r17
 176:	0f 91       	pop	r16
 178:	ff 90       	pop	r15
 17a:	ef 90       	pop	r14
 17c:	df 90       	pop	r13
 17e:	08 95       	ret

00000180 <suart_send_string>:

void suart_send_string(char *s, uint8_t size)
{
 180:	ff 92       	push	r15
 182:	0f 93       	push	r16
 184:	1f 93       	push	r17
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	f6 2e       	mov	r15, r22
	uint8_t i = 0;
	SUART_TX_ACTIVE;
 18c:	5d 9a       	sbi	0x0b, 5	; 11
	
	uint8_t checksum = 0;
	
	for(i = 0; i < size; ++i){
 18e:	66 23       	and	r22, r22
 190:	79 f0       	breq	.+30     	; 0x1b0 <suart_send_string+0x30>
 192:	c8 2f       	mov	r28, r24
 194:	d9 2f       	mov	r29, r25
 196:	10 e0       	ldi	r17, 0x00	; 0
void suart_send_string(char *s, uint8_t size)
{
	uint8_t i = 0;
	SUART_TX_ACTIVE;
	
	uint8_t checksum = 0;
 198:	00 e0       	ldi	r16, 0x00	; 0
 19a:	04 c0       	rjmp	.+8      	; 0x1a4 <suart_send_string+0x24>
	
	for(i = 0; i < size; ++i){
		if(i >= 2) checksum += s[i];
 19c:	12 30       	cpi	r17, 0x02	; 2
 19e:	10 f0       	brcs	.+4      	; 0x1a4 <suart_send_string+0x24>
 1a0:	88 81       	ld	r24, Y
 1a2:	08 0f       	add	r16, r24
		suart_send_char(s[i]);
 1a4:	89 91       	ld	r24, Y+
 1a6:	b2 df       	rcall	.-156    	; 0x10c <suart_send_char>
	uint8_t i = 0;
	SUART_TX_ACTIVE;
	
	uint8_t checksum = 0;
	
	for(i = 0; i < size; ++i){
 1a8:	1f 5f       	subi	r17, 0xFF	; 255
 1aa:	1f 11       	cpse	r17, r15
 1ac:	f7 cf       	rjmp	.-18     	; 0x19c <suart_send_string+0x1c>
 1ae:	01 c0       	rjmp	.+2      	; 0x1b2 <suart_send_string+0x32>
void suart_send_string(char *s, uint8_t size)
{
	uint8_t i = 0;
	SUART_TX_ACTIVE;
	
	uint8_t checksum = 0;
 1b0:	00 e0       	ldi	r16, 0x00	; 0
	
	for(i = 0; i < size; ++i){
		if(i >= 2) checksum += s[i];
		suart_send_char(s[i]);
	}
	suart_send_char(~checksum);
 1b2:	80 2f       	mov	r24, r16
 1b4:	80 95       	com	r24
 1b6:	aa df       	rcall	.-172    	; 0x10c <suart_send_char>
	while(!(UCSR1A & (1 << TXC1)));
 1b8:	e8 ec       	ldi	r30, 0xC8	; 200
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	86 ff       	sbrs	r24, 6
 1c0:	fd cf       	rjmp	.-6      	; 0x1bc <suart_send_string+0x3c>
}
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	1f 91       	pop	r17
 1c8:	0f 91       	pop	r16
 1ca:	ff 90       	pop	r15
 1cc:	08 95       	ret

000001ce <suart_command>:

servo_response suart_command(uint8_t id, char* command, uint8_t size){
 1ce:	df 92       	push	r13
 1d0:	ef 92       	push	r14
 1d2:	ff 92       	push	r15
 1d4:	0f 93       	push	r16
 1d6:	1f 93       	push	r17
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	cd b7       	in	r28, 0x3d	; 61
 1de:	de b7       	in	r29, 0x3e	; 62
 1e0:	65 97       	sbiw	r28, 0x15	; 21
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	f8 94       	cli
 1e6:	de bf       	out	0x3e, r29	; 62
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	cd bf       	out	0x3d, r28	; 61
 1ec:	d8 2e       	mov	r13, r24
 1ee:	cb 01       	movw	r24, r22
		parameter_list[i] = buffer[5+i];
	}
	response.parameters = parameter_list;
	
	return response;
}
 1f0:	ed b6       	in	r14, 0x3d	; 61
 1f2:	fe b6       	in	r15, 0x3e	; 62
}

servo_response suart_command(uint8_t id, char* command, uint8_t size){
	servo_response response;
	
	suart_send_string(command, size);
 1f4:	64 2f       	mov	r22, r20
 1f6:	c4 df       	rcall	.-120    	; 0x180 <suart_send_string>
	char buffer[16];
	uint8_t bytes_read = suart_read_string(buffer, 16);
 1f8:	60 e1       	ldi	r22, 0x10	; 16
 1fa:	70 e0       	ldi	r23, 0x00	; 0
 1fc:	ce 01       	movw	r24, r28
 1fe:	06 96       	adiw	r24, 0x06	; 6
 200:	8d df       	rcall	.-230    	; 0x11c <suart_read_string>
	
	if(bytes_read > 5){
 202:	86 30       	cpi	r24, 0x06	; 6
 204:	10 f0       	brcs	.+4      	; 0x20a <suart_command+0x3c>
		PORTB = 0x99;
 206:	89 e9       	ldi	r24, 0x99	; 153
 208:	85 b9       	out	0x05, r24	; 5
	}
	
	response.id = id;
	response.error = buffer[4];
 20a:	3a 85       	ldd	r19, Y+10	; 0x0a
	response.parameter_size = buffer[3]-2;
 20c:	49 85       	ldd	r20, Y+9	; 0x09
 20e:	42 50       	subi	r20, 0x02	; 2
	
	uint8_t parameter_list[response.parameter_size];
 210:	64 2f       	mov	r22, r20
 212:	70 e0       	ldi	r23, 0x00	; 0
 214:	8d b7       	in	r24, 0x3d	; 61
 216:	9e b7       	in	r25, 0x3e	; 62
 218:	86 1b       	sub	r24, r22
 21a:	97 0b       	sbc	r25, r23
 21c:	0f b6       	in	r0, 0x3f	; 63
 21e:	f8 94       	cli
 220:	9e bf       	out	0x3e, r25	; 62
 222:	0f be       	out	0x3f, r0	; 63
 224:	8d bf       	out	0x3d, r24	; 61
 226:	0d b7       	in	r16, 0x3d	; 61
 228:	1e b7       	in	r17, 0x3e	; 62
 22a:	0f 5f       	subi	r16, 0xFF	; 255
 22c:	1f 4f       	sbci	r17, 0xFF	; 255
	int i;
	for(i = 0; i < response.parameter_size; ++i){
 22e:	16 16       	cp	r1, r22
 230:	17 06       	cpc	r1, r23
 232:	54 f4       	brge	.+20     	; 0x248 <suart_command+0x7a>
 234:	fe 01       	movw	r30, r28
 236:	3b 96       	adiw	r30, 0x0b	; 11
 238:	d8 01       	movw	r26, r16
 23a:	6e 0f       	add	r22, r30
 23c:	7f 1f       	adc	r23, r31
		parameter_list[i] = buffer[5+i];
 23e:	91 91       	ld	r25, Z+
 240:	9d 93       	st	X+, r25
	response.error = buffer[4];
	response.parameter_size = buffer[3]-2;
	
	uint8_t parameter_list[response.parameter_size];
	int i;
	for(i = 0; i < response.parameter_size; ++i){
 242:	e6 17       	cp	r30, r22
 244:	f7 07       	cpc	r31, r23
 246:	d9 f7       	brne	.-10     	; 0x23e <suart_command+0x70>
		parameter_list[i] = buffer[5+i];
	}
	response.parameters = parameter_list;
	
	return response;
 248:	d9 82       	std	Y+1, r13	; 0x01
 24a:	3a 83       	std	Y+2, r19	; 0x02
 24c:	4b 83       	std	Y+3, r20	; 0x03
 24e:	1d 83       	std	Y+5, r17	; 0x05
 250:	0c 83       	std	Y+4, r16	; 0x04
 252:	50 2f       	mov	r21, r16
 254:	6d 81       	ldd	r22, Y+5	; 0x05
}
 256:	2d 2d       	mov	r18, r13
 258:	70 e0       	ldi	r23, 0x00	; 0
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	0f b6       	in	r0, 0x3f	; 63
 260:	f8 94       	cli
 262:	fe be       	out	0x3e, r15	; 62
 264:	0f be       	out	0x3f, r0	; 63
 266:	ed be       	out	0x3d, r14	; 61
 268:	65 96       	adiw	r28, 0x15	; 21
 26a:	0f b6       	in	r0, 0x3f	; 63
 26c:	f8 94       	cli
 26e:	de bf       	out	0x3e, r29	; 62
 270:	0f be       	out	0x3f, r0	; 63
 272:	cd bf       	out	0x3d, r28	; 61
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	1f 91       	pop	r17
 27a:	0f 91       	pop	r16
 27c:	ff 90       	pop	r15
 27e:	ef 90       	pop	r14
 280:	df 90       	pop	r13
 282:	08 95       	ret

00000284 <suart_command_ping>:

servo_response suart_command_ping(uint8_t id){
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
 288:	cd b7       	in	r28, 0x3d	; 61
 28a:	de b7       	in	r29, 0x3e	; 62
 28c:	2a 97       	sbiw	r28, 0x0a	; 10
 28e:	0f b6       	in	r0, 0x3f	; 63
 290:	f8 94       	cli
 292:	de bf       	out	0x3e, r29	; 62
 294:	0f be       	out	0x3f, r0	; 63
 296:	cd bf       	out	0x3d, r28	; 61
	char command[] = {0xFF, 0xFF, 0xFE, 0x02, 0x01};
 298:	95 e0       	ldi	r25, 0x05	; 5
 29a:	e0 e0       	ldi	r30, 0x00	; 0
 29c:	f1 e0       	ldi	r31, 0x01	; 1
 29e:	de 01       	movw	r26, r28
 2a0:	16 96       	adiw	r26, 0x06	; 6
 2a2:	01 90       	ld	r0, Z+
 2a4:	0d 92       	st	X+, r0
 2a6:	9a 95       	dec	r25
 2a8:	e1 f7       	brne	.-8      	; 0x2a2 <suart_command_ping+0x1e>
	return suart_command(id, command, 5);
 2aa:	45 e0       	ldi	r20, 0x05	; 5
 2ac:	be 01       	movw	r22, r28
 2ae:	6a 5f       	subi	r22, 0xFA	; 250
 2b0:	7f 4f       	sbci	r23, 0xFF	; 255
 2b2:	8d df       	rcall	.-230    	; 0x1ce <suart_command>
 2b4:	70 e0       	ldi	r23, 0x00	; 0
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	2a 96       	adiw	r28, 0x0a	; 10
 2bc:	0f b6       	in	r0, 0x3f	; 63
 2be:	f8 94       	cli
 2c0:	de bf       	out	0x3e, r29	; 62
 2c2:	0f be       	out	0x3f, r0	; 63
 2c4:	cd bf       	out	0x3d, r28	; 61
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	08 95       	ret

000002cc <_exit>:
 2cc:	f8 94       	cli

000002ce <__stop_program>:
 2ce:	ff cf       	rjmp	.-2      	; 0x2ce <__stop_program>
