
Rorelsemodul.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002e4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00800100  00800100  00000358  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000118  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000a16  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000003b4  00000000  00000000  00000eb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000007b6  00000000  00000000  0000126a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000003e8  00000000  00000000  00001a20  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000003a3  00000000  00000000  00001e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000c13  00000000  00000000  000021ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000e8  00000000  00000000  00002dbe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	9a c0       	rjmp	.+308    	; 0x15a <__vector_9>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	67 c0       	rjmp	.+206    	; 0x104 <__vector_13>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	36 c0       	rjmp	.+108    	; 0xae <__vector_16>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	af c0       	rjmp	.+350    	; 0x1d8 <__vector_30>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a6 30       	cpi	r26, 0x06	; 6
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	83 d0       	rcall	.+262    	; 0x1b0 <main>
  aa:	1a c1       	rjmp	.+564    	; 0x2e0 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <__vector_16>:
	TCNT2 = 0;
	TIMSK2 |= _BV(OCIE2A);
}

void timer2_stop() {
	TCCR2B = 0;
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	0b b6       	in	r0, 0x3b	; 59
  ba:	0f 92       	push	r0
  bc:	2f 93       	push	r18
  be:	3f 93       	push	r19
  c0:	4f 93       	push	r20
  c2:	5f 93       	push	r21
  c4:	6f 93       	push	r22
  c6:	7f 93       	push	r23
  c8:	8f 93       	push	r24
  ca:	9f 93       	push	r25
  cc:	af 93       	push	r26
  ce:	bf 93       	push	r27
  d0:	ef 93       	push	r30
  d2:	ff 93       	push	r31
  d4:	e0 91 00 01 	lds	r30, 0x0100
  d8:	f0 91 01 01 	lds	r31, 0x0101
  dc:	09 95       	icall
  de:	ff 91       	pop	r31
  e0:	ef 91       	pop	r30
  e2:	bf 91       	pop	r27
  e4:	af 91       	pop	r26
  e6:	9f 91       	pop	r25
  e8:	8f 91       	pop	r24
  ea:	7f 91       	pop	r23
  ec:	6f 91       	pop	r22
  ee:	5f 91       	pop	r21
  f0:	4f 91       	pop	r20
  f2:	3f 91       	pop	r19
  f4:	2f 91       	pop	r18
  f6:	0f 90       	pop	r0
  f8:	0b be       	out	0x3b, r0	; 59
  fa:	0f 90       	pop	r0
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	0f 90       	pop	r0
 100:	1f 90       	pop	r1
 102:	18 95       	reti

00000104 <__vector_13>:
 104:	1f 92       	push	r1
 106:	0f 92       	push	r0
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	0f 92       	push	r0
 10c:	11 24       	eor	r1, r1
 10e:	0b b6       	in	r0, 0x3b	; 59
 110:	0f 92       	push	r0
 112:	2f 93       	push	r18
 114:	3f 93       	push	r19
 116:	4f 93       	push	r20
 118:	5f 93       	push	r21
 11a:	6f 93       	push	r22
 11c:	7f 93       	push	r23
 11e:	8f 93       	push	r24
 120:	9f 93       	push	r25
 122:	af 93       	push	r26
 124:	bf 93       	push	r27
 126:	ef 93       	push	r30
 128:	ff 93       	push	r31
 12a:	e0 91 04 01 	lds	r30, 0x0104
 12e:	f0 91 05 01 	lds	r31, 0x0105
 132:	09 95       	icall
 134:	ff 91       	pop	r31
 136:	ef 91       	pop	r30
 138:	bf 91       	pop	r27
 13a:	af 91       	pop	r26
 13c:	9f 91       	pop	r25
 13e:	8f 91       	pop	r24
 140:	7f 91       	pop	r23
 142:	6f 91       	pop	r22
 144:	5f 91       	pop	r21
 146:	4f 91       	pop	r20
 148:	3f 91       	pop	r19
 14a:	2f 91       	pop	r18
 14c:	0f 90       	pop	r0
 14e:	0b be       	out	0x3b, r0	; 59
 150:	0f 90       	pop	r0
 152:	0f be       	out	0x3f, r0	; 63
 154:	0f 90       	pop	r0
 156:	1f 90       	pop	r1
 158:	18 95       	reti

0000015a <__vector_9>:
}

#ifdef ENABLE_TIMER2
ISR(TIMER2_COMPA_vect) {
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	0b b6       	in	r0, 0x3b	; 59
 166:	0f 92       	push	r0
 168:	2f 93       	push	r18
 16a:	3f 93       	push	r19
 16c:	4f 93       	push	r20
 16e:	5f 93       	push	r21
 170:	6f 93       	push	r22
 172:	7f 93       	push	r23
 174:	8f 93       	push	r24
 176:	9f 93       	push	r25
 178:	af 93       	push	r26
 17a:	bf 93       	push	r27
 17c:	ef 93       	push	r30
 17e:	ff 93       	push	r31
	_t2_func();
 180:	e0 91 02 01 	lds	r30, 0x0102
 184:	f0 91 03 01 	lds	r31, 0x0103
 188:	09 95       	icall
}
 18a:	ff 91       	pop	r31
 18c:	ef 91       	pop	r30
 18e:	bf 91       	pop	r27
 190:	af 91       	pop	r26
 192:	9f 91       	pop	r25
 194:	8f 91       	pop	r24
 196:	7f 91       	pop	r23
 198:	6f 91       	pop	r22
 19a:	5f 91       	pop	r21
 19c:	4f 91       	pop	r20
 19e:	3f 91       	pop	r19
 1a0:	2f 91       	pop	r18
 1a2:	0f 90       	pop	r0
 1a4:	0b be       	out	0x3b, r0	; 59
 1a6:	0f 90       	pop	r0
 1a8:	0f be       	out	0x3f, r0	; 63
 1aa:	0f 90       	pop	r0
 1ac:	1f 90       	pop	r1
 1ae:	18 95       	reti

000001b0 <main>:
//#include <util/delay.h>

//volatile unsigned char data;

int main(void)
{	
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	1f 92       	push	r1
 1b6:	cd b7       	in	r28, 0x3d	; 61
 1b8:	de b7       	in	r29, 0x3e	; 62
	suart_init(1000000);
 1ba:	60 e4       	ldi	r22, 0x40	; 64
 1bc:	72 e4       	ldi	r23, 0x42	; 66
 1be:	8f e0       	ldi	r24, 0x0F	; 15
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	15 d0       	rcall	.+42     	; 0x1ee <suart_init>
	sei();
 1c4:	78 94       	sei
	
	//www.wormfood.net/avrbaudcalc.php
	//extremeelectronics.co.in/avr-tutorials/using-the-usart-of-avr-microcontrollers/
	//UBRR = 23, 0x0017
	
	DDRB = 0xFF;
 1c6:	8f ef       	ldi	r24, 0xFF	; 255
 1c8:	84 b9       	out	0x04, r24	; 4
	
	//servo_response res;
	uint8_t list1[] = {0x01};
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	89 83       	std	Y+1, r24	; 0x01
		
	//res = suart_command_write_data(12, 0x20, list1, 1);
	//res = suart_command_reset(0xFE);
	//suart_command_ping(1);
	//PORTB = res.error;
	suart_send_string(list1, 1);
 1ce:	61 e0       	ldi	r22, 0x01	; 1
 1d0:	ce 01       	movw	r24, r28
 1d2:	01 96       	adiw	r24, 0x01	; 1
 1d4:	42 d0       	rcall	.+132    	; 0x25a <suart_send_string>
 1d6:	ff cf       	rjmp	.-2      	; 0x1d6 <main+0x26>

000001d8 <__vector_30>:
		//SUART_TX_ACTIVE;
		//_delay_ms(10);
    }
}

ISR(USART1_TX_vect){
 1d8:	1f 92       	push	r1
 1da:	0f 92       	push	r0
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	0f 92       	push	r0
 1e0:	11 24       	eor	r1, r1
	SUART_RX_ACTIVE;
 1e2:	5d 98       	cbi	0x0b, 5	; 11
 1e4:	0f 90       	pop	r0
 1e6:	0f be       	out	0x3f, r0	; 63
 1e8:	0f 90       	pop	r0
 1ea:	1f 90       	pop	r1
 1ec:	18 95       	reti

000001ee <suart_init>:
	}
	
	s[i] = 0;
	
	return i + 1;
}
 1ee:	9b 01       	movw	r18, r22
 1f0:	ac 01       	movw	r20, r24
 1f2:	80 e2       	ldi	r24, 0x20	; 32
 1f4:	8a b9       	out	0x0a, r24	; 10
 1f6:	da 01       	movw	r26, r20
 1f8:	c9 01       	movw	r24, r18
 1fa:	55 23       	and	r21, r21
 1fc:	1c f4       	brge	.+6      	; 0x204 <suart_init+0x16>
 1fe:	01 96       	adiw	r24, 0x01	; 1
 200:	a1 1d       	adc	r26, r1
 202:	b1 1d       	adc	r27, r1
 204:	b5 95       	asr	r27
 206:	a7 95       	ror	r26
 208:	97 95       	ror	r25
 20a:	87 95       	ror	r24
 20c:	bc 01       	movw	r22, r24
 20e:	cd 01       	movw	r24, r26
 210:	60 5c       	subi	r22, 0xC0	; 192
 212:	7d 4b       	sbci	r23, 0xBD	; 189
 214:	80 4f       	sbci	r24, 0xF0	; 240
 216:	9f 4f       	sbci	r25, 0xFF	; 255
 218:	41 d0       	rcall	.+130    	; 0x29c <__udivmodsi4>
 21a:	da 01       	movw	r26, r20
 21c:	c9 01       	movw	r24, r18
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	a1 09       	sbc	r26, r1
 222:	b1 09       	sbc	r27, r1
 224:	89 2f       	mov	r24, r25
 226:	9a 2f       	mov	r25, r26
 228:	ab 2f       	mov	r26, r27
 22a:	bb 27       	eor	r27, r27
 22c:	80 93 cd 00 	sts	0x00CD, r24
 230:	21 50       	subi	r18, 0x01	; 1
 232:	20 93 cc 00 	sts	0x00CC, r18
 236:	86 e0       	ldi	r24, 0x06	; 6
 238:	80 93 ca 00 	sts	0x00CA, r24
 23c:	e9 ec       	ldi	r30, 0xC9	; 201
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	80 81       	ld	r24, Z
 242:	88 65       	ori	r24, 0x58	; 88
 244:	80 83       	st	Z, r24
 246:	08 95       	ret

00000248 <suart_send_char>:
 248:	5d 9a       	sbi	0x0b, 5	; 11
 24a:	e8 ec       	ldi	r30, 0xC8	; 200
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	90 81       	ld	r25, Z
 250:	95 ff       	sbrs	r25, 5
 252:	fd cf       	rjmp	.-6      	; 0x24e <suart_send_char+0x6>
 254:	80 93 ce 00 	sts	0x00CE, r24
 258:	08 95       	ret

0000025a <suart_send_string>:

void suart_send_string(char *s, uint8_t size)
{
 25a:	ff 92       	push	r15
 25c:	0f 93       	push	r16
 25e:	1f 93       	push	r17
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
 264:	f6 2e       	mov	r15, r22
	uint8_t i = 0;
	
	char checksum = 0;
	
	for(i = 0; i < size; ++i){
 266:	66 23       	and	r22, r22
 268:	79 f0       	breq	.+30     	; 0x288 <suart_send_string+0x2e>
 26a:	c8 2f       	mov	r28, r24
 26c:	d9 2f       	mov	r29, r25
 26e:	10 e0       	ldi	r17, 0x00	; 0

void suart_send_string(char *s, uint8_t size)
{
	uint8_t i = 0;
	
	char checksum = 0;
 270:	00 e0       	ldi	r16, 0x00	; 0
 272:	04 c0       	rjmp	.+8      	; 0x27c <suart_send_string+0x22>
	
	for(i = 0; i < size; ++i){
		if(i >= 2) checksum += s[i];
 274:	12 30       	cpi	r17, 0x02	; 2
 276:	10 f0       	brcs	.+4      	; 0x27c <suart_send_string+0x22>
 278:	88 81       	ld	r24, Y
 27a:	08 0f       	add	r16, r24
		suart_send_char(s[i]);
 27c:	89 91       	ld	r24, Y+
 27e:	e4 df       	rcall	.-56     	; 0x248 <suart_send_char>
{
	uint8_t i = 0;
	
	char checksum = 0;
	
	for(i = 0; i < size; ++i){
 280:	1f 5f       	subi	r17, 0xFF	; 255
 282:	1f 11       	cpse	r17, r15
 284:	f7 cf       	rjmp	.-18     	; 0x274 <suart_send_string+0x1a>
 286:	01 c0       	rjmp	.+2      	; 0x28a <suart_send_string+0x30>

void suart_send_string(char *s, uint8_t size)
{
	uint8_t i = 0;
	
	char checksum = 0;
 288:	00 e0       	ldi	r16, 0x00	; 0
	for(i = 0; i < size; ++i){
		if(i >= 2) checksum += s[i];
		suart_send_char(s[i]);
	}
	
	suart_send_char(~checksum);
 28a:	80 2f       	mov	r24, r16
 28c:	80 95       	com	r24
 28e:	dc df       	rcall	.-72     	; 0x248 <suart_send_char>
}
 290:	df 91       	pop	r29
 292:	cf 91       	pop	r28
 294:	1f 91       	pop	r17
 296:	0f 91       	pop	r16
 298:	ff 90       	pop	r15
 29a:	08 95       	ret

0000029c <__udivmodsi4>:
 29c:	a1 e2       	ldi	r26, 0x21	; 33
 29e:	1a 2e       	mov	r1, r26
 2a0:	aa 1b       	sub	r26, r26
 2a2:	bb 1b       	sub	r27, r27
 2a4:	fd 01       	movw	r30, r26
 2a6:	0d c0       	rjmp	.+26     	; 0x2c2 <__udivmodsi4_ep>

000002a8 <__udivmodsi4_loop>:
 2a8:	aa 1f       	adc	r26, r26
 2aa:	bb 1f       	adc	r27, r27
 2ac:	ee 1f       	adc	r30, r30
 2ae:	ff 1f       	adc	r31, r31
 2b0:	a2 17       	cp	r26, r18
 2b2:	b3 07       	cpc	r27, r19
 2b4:	e4 07       	cpc	r30, r20
 2b6:	f5 07       	cpc	r31, r21
 2b8:	20 f0       	brcs	.+8      	; 0x2c2 <__udivmodsi4_ep>
 2ba:	a2 1b       	sub	r26, r18
 2bc:	b3 0b       	sbc	r27, r19
 2be:	e4 0b       	sbc	r30, r20
 2c0:	f5 0b       	sbc	r31, r21

000002c2 <__udivmodsi4_ep>:
 2c2:	66 1f       	adc	r22, r22
 2c4:	77 1f       	adc	r23, r23
 2c6:	88 1f       	adc	r24, r24
 2c8:	99 1f       	adc	r25, r25
 2ca:	1a 94       	dec	r1
 2cc:	69 f7       	brne	.-38     	; 0x2a8 <__udivmodsi4_loop>
 2ce:	60 95       	com	r22
 2d0:	70 95       	com	r23
 2d2:	80 95       	com	r24
 2d4:	90 95       	com	r25
 2d6:	9b 01       	movw	r18, r22
 2d8:	ac 01       	movw	r20, r24
 2da:	bd 01       	movw	r22, r26
 2dc:	cf 01       	movw	r24, r30
 2de:	08 95       	ret

000002e0 <_exit>:
 2e0:	f8 94       	cli

000002e2 <__stop_program>:
 2e2:	ff cf       	rjmp	.-2      	; 0x2e2 <__stop_program>
