
Rorelsemodul.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000178  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000070  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000004cd  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000002a3  00000000  00000000  00000739  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000357  00000000  00000000  000009dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000134  00000000  00000000  00000d34  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000021f  00000000  00000000  00000e68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000516  00000000  00000000  00001087  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000050  00000000  00000000  0000159d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e7       	ldi	r30, 0x78	; 120
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	02 d0       	rcall	.+4      	; 0xb8 <main>
  b4:	5f c0       	rjmp	.+190    	; 0x174 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <main>:
 */ 

#include "servo_uart.h"

int main(void)
{	
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	64 97       	sbiw	r28, 0x14	; 20
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	f8 94       	cli
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	cd bf       	out	0x3d, r28	; 61
	suart_init();
  cc:	17 d0       	rcall	.+46     	; 0xfc <suart_init>
	
	//www.wormfood.net/avrbaudcalc.php
	//extremeelectronics.co.in/avr-tutorials/using-the-usart-of-avr-microcontrollers/
	//UBRR = 23, 0x0017
	char send[20] = {0xFF, 0xFF, 0x01, 0x02, 0x01};
  ce:	fe 01       	movw	r30, r28
  d0:	31 96       	adiw	r30, 0x01	; 1
  d2:	84 e1       	ldi	r24, 0x14	; 20
  d4:	df 01       	movw	r26, r30
  d6:	1d 92       	st	X+, r1
  d8:	8a 95       	dec	r24
  da:	e9 f7       	brne	.-6      	; 0xd6 <main+0x1e>
  dc:	8f ef       	ldi	r24, 0xFF	; 255
  de:	89 83       	std	Y+1, r24	; 0x01
  e0:	8a 83       	std	Y+2, r24	; 0x02
  e2:	91 e0       	ldi	r25, 0x01	; 1
  e4:	9b 83       	std	Y+3, r25	; 0x03
  e6:	22 e0       	ldi	r18, 0x02	; 2
  e8:	2c 83       	std	Y+4, r18	; 0x04
  ea:	9d 83       	std	Y+5, r25	; 0x05
	//char recv[20];
	//int i = 0;
	
	DDRB = 0xFF;
  ec:	84 b9       	out	0x04, r24	; 4
	//if(res == (servo_response)SERVO_ERROR);
	
	
	while(1)
	{
		PORTD &= ~(1 << PORTD5);
  ee:	5d 98       	cbi	0x0b, 5	; 11
		PORTD |= (1 << PORTD5);
  f0:	5d 9a       	sbi	0x0b, 5	; 11
		suart_send_string(send, 5);
  f2:	65 e0       	ldi	r22, 0x05	; 5
  f4:	ce 01       	movw	r24, r28
  f6:	01 96       	adiw	r24, 0x01	; 1
  f8:	1b d0       	rcall	.+54     	; 0x130 <suart_send_string>
  fa:	f9 cf       	rjmp	.-14     	; 0xee <main+0x36>

000000fc <suart_init>:
	}
	
	s[i] = 0;
	
	return i + 1;
}
  fc:	80 e2       	ldi	r24, 0x20	; 32
  fe:	8a b9       	out	0x0a, r24	; 10
 100:	87 e1       	ldi	r24, 0x17	; 23
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	90 93 cd 00 	sts	0x00CD, r25
 108:	80 93 cc 00 	sts	0x00CC, r24
 10c:	86 e0       	ldi	r24, 0x06	; 6
 10e:	80 93 ca 00 	sts	0x00CA, r24
 112:	e9 ec       	ldi	r30, 0xC9	; 201
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	88 61       	ori	r24, 0x18	; 24
 11a:	80 83       	st	Z, r24
 11c:	08 95       	ret

0000011e <suart_send_char>:
 11e:	5c 9a       	sbi	0x0b, 4	; 11
 120:	e8 ec       	ldi	r30, 0xC8	; 200
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	90 81       	ld	r25, Z
 126:	95 ff       	sbrs	r25, 5
 128:	fd cf       	rjmp	.-6      	; 0x124 <suart_send_char+0x6>
 12a:	80 93 ce 00 	sts	0x00CE, r24
 12e:	08 95       	ret

00000130 <suart_send_string>:

void suart_send_string(char *s, uint8_t size)
{
 130:	ff 92       	push	r15
 132:	0f 93       	push	r16
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	f6 2e       	mov	r15, r22
	uint8_t i = 0;
	SUART_TX_ACTIVE;
 13c:	5c 9a       	sbi	0x0b, 4	; 11
	
	uint8_t checksum = 0;
	
	for(i = 0; i < size; ++i){
 13e:	66 23       	and	r22, r22
 140:	79 f0       	breq	.+30     	; 0x160 <suart_send_string+0x30>
 142:	c8 2f       	mov	r28, r24
 144:	d9 2f       	mov	r29, r25
 146:	10 e0       	ldi	r17, 0x00	; 0
void suart_send_string(char *s, uint8_t size)
{
	uint8_t i = 0;
	SUART_TX_ACTIVE;
	
	uint8_t checksum = 0;
 148:	00 e0       	ldi	r16, 0x00	; 0
 14a:	04 c0       	rjmp	.+8      	; 0x154 <suart_send_string+0x24>
	
	for(i = 0; i < size; ++i){
		if(i >= 2) checksum += s[i];
 14c:	12 30       	cpi	r17, 0x02	; 2
 14e:	10 f0       	brcs	.+4      	; 0x154 <suart_send_string+0x24>
 150:	88 81       	ld	r24, Y
 152:	08 0f       	add	r16, r24
		suart_send_char(s[i]);
 154:	89 91       	ld	r24, Y+
 156:	e3 df       	rcall	.-58     	; 0x11e <suart_send_char>
	uint8_t i = 0;
	SUART_TX_ACTIVE;
	
	uint8_t checksum = 0;
	
	for(i = 0; i < size; ++i){
 158:	1f 5f       	subi	r17, 0xFF	; 255
 15a:	1f 11       	cpse	r17, r15
 15c:	f7 cf       	rjmp	.-18     	; 0x14c <suart_send_string+0x1c>
 15e:	01 c0       	rjmp	.+2      	; 0x162 <suart_send_string+0x32>
void suart_send_string(char *s, uint8_t size)
{
	uint8_t i = 0;
	SUART_TX_ACTIVE;
	
	uint8_t checksum = 0;
 160:	00 e0       	ldi	r16, 0x00	; 0
	
	for(i = 0; i < size; ++i){
		if(i >= 2) checksum += s[i];
		suart_send_char(s[i]);
	}
	suart_send_char(~checksum);
 162:	80 2f       	mov	r24, r16
 164:	80 95       	com	r24
 166:	db df       	rcall	.-74     	; 0x11e <suart_send_char>
}
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	1f 91       	pop	r17
 16e:	0f 91       	pop	r16
 170:	ff 90       	pop	r15
 172:	08 95       	ret

00000174 <_exit>:
 174:	f8 94       	cli

00000176 <__stop_program>:
 176:	ff cf       	rjmp	.-2      	; 0x176 <__stop_program>
